//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Microsoft.Practices.Unity;
using System.Transactions;
using Apps.Locale;
using System.Linq.Expressions;
namespace Apps.Service.Sys
{
	public class Virtual_SysUserService
	{

		public Apps.IRepository.IDBSession DBSession{
			 get
			{
				return DBSessionFactory.GetDBSession();
			}
		}
	   
		public Apps.IRepository.Sys.ISysUserRepository m_Rep{
			 get
			{
				return DBSession.SysUser;
			}
		}
		

		public virtual List<Apps.Models.Sys.SysUserModel> GetList(Expression<Func<Apps.Models.SysUser, bool>> where = null){
		
				IQueryable<SysUser> queryData = m_Rep.GetList(where);
				return CreateModelList(ref queryData);
		}

		public virtual List<Apps.Models.Sys.SysUserModel> GetListSort<TKey>(Expression<Func<Apps.Models.SysUser, bool>> where,Expression<Func<Apps.Models.SysUser, TKey>>orderBy, bool isAsc = true){
		
				IQueryable<SysUser> queryData = m_Rep.GetListSort(where, orderBy, isAsc);
				return CreateModelList(ref queryData);
		}

		public virtual List<Apps.Models.Sys.SysUserModel> GetList(ref GridPager pager, string queryStr,Expression<Func<Apps.Models.SysUser, bool>> where = null)
		{

			IQueryable<SysUser> queryData;
			
			if (!string.IsNullOrWhiteSpace(queryStr))
			{
				queryData = m_Rep.GetList(where
								,a=>a.Id.Contains(queryStr)
								|| a.UserName.Contains(queryStr)
								|| a.Password.Contains(queryStr)
								
								|| a.TrueName.Contains(queryStr)
								|| a.Card.Contains(queryStr)
								|| a.MobileNumber.Contains(queryStr)
								|| a.PhoneNumber.Contains(queryStr)
								|| a.QQ.Contains(queryStr)
								|| a.EmailAddress.Contains(queryStr)
								|| a.OtherContact.Contains(queryStr)
								|| a.Province.Contains(queryStr)
								|| a.City.Contains(queryStr)
								|| a.Village.Contains(queryStr)
								|| a.Address.Contains(queryStr)
								
								
								|| a.CreatePerson.Contains(queryStr)
								|| a.Sex.Contains(queryStr)
								
								
								|| a.Marital.Contains(queryStr)
								|| a.Political.Contains(queryStr)
								|| a.Nationality.Contains(queryStr)
								|| a.Native.Contains(queryStr)
								|| a.School.Contains(queryStr)
								|| a.Professional.Contains(queryStr)
								|| a.Degree.Contains(queryStr)
								|| a.DepId.Contains(queryStr)
								|| a.PosId.Contains(queryStr)
								|| a.Expertise.Contains(queryStr)
								|| a.Photo.Contains(queryStr)
								|| a.Attach.Contains(queryStr)
								|| a.Lead.Contains(queryStr)
								|| a.LeadName.Contains(queryStr)
								);
			}else{
				queryData = m_Rep.GetList(where);
			}
			
		  
			pager.totalRows = queryData.Count();
			//排序
			queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
			return CreateModelList(ref queryData);
		}
		public virtual List<Apps.Models.Sys.SysUserModel> CreateModelList(ref IQueryable<SysUser> queryData)
		{

			List<Apps.Models.Sys.SysUserModel> modelList = (from r in queryData
											  select new Apps.Models.Sys.SysUserModel
											  {
													Id = r.Id,
													UserName = r.UserName,
													Password = r.Password,
													PasswordExpirationTime = r.PasswordExpirationTime,
													TrueName = r.TrueName,
													Card = r.Card,
													MobileNumber = r.MobileNumber,
													PhoneNumber = r.PhoneNumber,
													QQ = r.QQ,
													EmailAddress = r.EmailAddress,
													OtherContact = r.OtherContact,
													Province = r.Province,
													City = r.City,
													Village = r.Village,
													Address = r.Address,
													State = r.State,
													CreateTime = r.CreateTime,
													CreatePerson = r.CreatePerson,
													Sex = r.Sex,
													Birthday = r.Birthday,
													JoinDate = r.JoinDate,
													Marital = r.Marital,
													Political = r.Political,
													Nationality = r.Nationality,
													Native = r.Native,
													School = r.School,
													Professional = r.Professional,
													Degree = r.Degree,
													DepId = r.DepId,
													PosId = r.PosId,
													Expertise = r.Expertise,
													Photo = r.Photo,
													Attach = r.Attach,
													Lead = r.Lead,
													LeadName = r.LeadName,
          
											  }).ToList();

			return modelList;
		}

		public virtual void Create(ref ValidationErrors errors, Apps.Models.Sys.SysUserModel model)
		{
				SysUser entity = m_Rep.GetById(model.Id);
				if (entity != null)
				{
					errors.Add(Resource.PrimaryRepeat);
					return;
				}
				entity = new SysUser();
			   				entity.Id = model.Id;
				entity.UserName = model.UserName;
				entity.Password = model.Password;
				entity.PasswordExpirationTime = model.PasswordExpirationTime;
				entity.TrueName = model.TrueName;
				entity.Card = model.Card;
				entity.MobileNumber = model.MobileNumber;
				entity.PhoneNumber = model.PhoneNumber;
				entity.QQ = model.QQ;
				entity.EmailAddress = model.EmailAddress;
				entity.OtherContact = model.OtherContact;
				entity.Province = model.Province;
				entity.City = model.City;
				entity.Village = model.Village;
				entity.Address = model.Address;
				entity.State = model.State;
				entity.CreateTime = model.CreateTime;
				entity.CreatePerson = model.CreatePerson;
				entity.Sex = model.Sex;
				entity.Birthday = model.Birthday;
				entity.JoinDate = model.JoinDate;
				entity.Marital = model.Marital;
				entity.Political = model.Political;
				entity.Nationality = model.Nationality;
				entity.Native = model.Native;
				entity.School = model.School;
				entity.Professional = model.Professional;
				entity.Degree = model.Degree;
				entity.DepId = model.DepId;
				entity.PosId = model.PosId;
				entity.Expertise = model.Expertise;
				entity.Photo = model.Photo;
				entity.Attach = model.Attach;
				entity.Lead = model.Lead;
				entity.LeadName = model.LeadName;
  
				m_Rep.Create(entity);
		}



		 public virtual void RemoveById(ref ValidationErrors errors, string id)
		{
			
				m_Rep.RemoveById(id);
			
		}

		public virtual void RemoveByIds(ref ValidationErrors errors, string[] deleteCollection)
		{
				if (deleteCollection != null)
				{
				   //事务批量删除
				   // using (TransactionScope transactionScope = new TransactionScope())
				   // {
				   //     if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
				   //     {
				   //         transactionScope.Complete();
				   //         return true;
				   //     }
				   //    else
				   //     {
				   //         Transaction.Current.Rollback();
				   //         return false;
				   //     }
				   // }
				   m_Rep.RemoveById(deleteCollection);
				}
		}

		
	   

		public virtual void Modify(ref ValidationErrors errors, Apps.Models.Sys.SysUserModel model,params string[] updateProperties)
		{
				SysUser entity = m_Rep.GetById(model.Id);
				if (entity == null)
				{
					errors.Add(Resource.Disable);
					return;
				}
							if (updateProperties.Count() <= 0){
										entity.Id = model.Id;
											entity.UserName = model.UserName;
											entity.Password = model.Password;
											entity.PasswordExpirationTime = model.PasswordExpirationTime;
											entity.TrueName = model.TrueName;
											entity.Card = model.Card;
											entity.MobileNumber = model.MobileNumber;
											entity.PhoneNumber = model.PhoneNumber;
											entity.QQ = model.QQ;
											entity.EmailAddress = model.EmailAddress;
											entity.OtherContact = model.OtherContact;
											entity.Province = model.Province;
											entity.City = model.City;
											entity.Village = model.Village;
											entity.Address = model.Address;
											entity.State = model.State;
											entity.CreateTime = model.CreateTime;
											entity.CreatePerson = model.CreatePerson;
											entity.Sex = model.Sex;
											entity.Birthday = model.Birthday;
											entity.JoinDate = model.JoinDate;
											entity.Marital = model.Marital;
											entity.Political = model.Political;
											entity.Nationality = model.Nationality;
											entity.Native = model.Native;
											entity.School = model.School;
											entity.Professional = model.Professional;
											entity.Degree = model.Degree;
											entity.DepId = model.DepId;
											entity.PosId = model.PosId;
											entity.Expertise = model.Expertise;
											entity.Photo = model.Photo;
											entity.Attach = model.Attach;
											entity.Lead = model.Lead;
											entity.LeadName = model.LeadName;
									}else{
					
						Type type = typeof(Apps.Models.Sys.SysUserModel);
						Type typeE = typeof(Apps.Models.SysUser);
						foreach (var item in updateProperties) {
						System.Reflection.PropertyInfo pi = type.GetProperty(item);
						System.Reflection.PropertyInfo piE = typeE.GetProperty(item);
						piE.SetValue(entity,pi.GetValue(model),null);
				}
				}
				 

				m_Rep.Modify(entity,updateProperties);
		}

	  

		public virtual Apps.Models.Sys.SysUserModel GetById(string id)
		{
			SysUser entity = m_Rep.GetById(id);
			if (entity!=null)
			{
				//SysUser entity = m_Rep.GetById(id);
				Apps.Models.Sys.SysUserModel model = new Apps.Models.Sys.SysUserModel();
							  				model.Id = entity.Id;
				model.UserName = entity.UserName;
				model.Password = entity.Password;
				model.PasswordExpirationTime = entity.PasswordExpirationTime;
				model.TrueName = entity.TrueName;
				model.Card = entity.Card;
				model.MobileNumber = entity.MobileNumber;
				model.PhoneNumber = entity.PhoneNumber;
				model.QQ = entity.QQ;
				model.EmailAddress = entity.EmailAddress;
				model.OtherContact = entity.OtherContact;
				model.Province = entity.Province;
				model.City = entity.City;
				model.Village = entity.Village;
				model.Address = entity.Address;
				model.State = entity.State;
				model.CreateTime = entity.CreateTime;
				model.CreatePerson = entity.CreatePerson;
				model.Sex = entity.Sex;
				model.Birthday = entity.Birthday;
				model.JoinDate = entity.JoinDate;
				model.Marital = entity.Marital;
				model.Political = entity.Political;
				model.Nationality = entity.Nationality;
				model.Native = entity.Native;
				model.School = entity.School;
				model.Professional = entity.Professional;
				model.Degree = entity.Degree;
				model.DepId = entity.DepId;
				model.PosId = entity.PosId;
				model.Expertise = entity.Expertise;
				model.Photo = entity.Photo;
				model.Attach = entity.Attach;
				model.Lead = entity.Lead;
				model.LeadName = entity.LeadName;
 
				return model;
			}
			else
			{
				return null;
			}
		}

	 

	}
}
