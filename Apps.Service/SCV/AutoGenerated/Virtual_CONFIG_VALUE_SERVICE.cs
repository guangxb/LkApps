//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Microsoft.Practices.Unity;
using System.Transactions;
using Apps.Locale;
using System.Linq.Expressions;
namespace Apps.Service.SCV.CONFIG
{
	public class Virtual_CONFIG_VALUE_SERVICE
	{

		public Apps.IRepository.SCV.ISCVDBSession SCVDBSession{
			 get
			{
				return Service.SCV.SCVDBSessionFactory.GetDBSession();
			}
		}
	   
		public Apps.IRepository.SCV.CONFIG.ICONFIG_VALUE_REPOSITORY m_Rep{
			 get
			{
				return SCVDBSession.CONFIG_VALUE;
			}
		}
		

		public virtual List<Apps.Models.SCV.CONFIG.CONFIG_VALUE_MODEL> GetList(Expression<Func<Apps.Models.CONFIG_VALUE, bool>> where = null){
		
				IQueryable<Apps.Models.CONFIG_VALUE> queryData = m_Rep.GetList(where);
				return CreateModelList(ref queryData);
		}

		public virtual List<Apps.Models.SCV.CONFIG.CONFIG_VALUE_MODEL> GetListSort<TKey>(Expression<Func<Apps.Models.CONFIG_VALUE, bool>> where,Expression<Func<Apps.Models.CONFIG_VALUE, TKey>>orderBy, bool isAsc = true){
		
				IQueryable<Apps.Models.CONFIG_VALUE> queryData = m_Rep.GetListSort(where, orderBy, isAsc);
				return CreateModelList(ref queryData);
		}

		public virtual List<Apps.Models.SCV.CONFIG.CONFIG_VALUE_MODEL> GetList(ref GridPager pager, string queryStr,Expression<Func<Apps.Models.CONFIG_VALUE, bool>> where = null)
		{

			IQueryable<Apps.Models.CONFIG_VALUE> queryData;
			
			if (!string.IsNullOrWhiteSpace(queryStr))
			{
				queryData = m_Rep.GetList(where
								
								,a=>a.RECORD_TYPE.Contains(queryStr)
								|| a.IDENTIFIER.Contains(queryStr)
								|| a.VALUE.Contains(queryStr)
								|| a.DESCRIPTION.Contains(queryStr)
								|| a.ACTIVE.Contains(queryStr)
								|| a.SYSTEM_CREATED.Contains(queryStr)
								);
			}else{
				queryData = m_Rep.GetList(where);
			}
			
		  
			pager.totalRows = queryData.Count();
			//排序
			queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
			return CreateModelList(ref queryData);
		}
		public virtual List<Apps.Models.SCV.CONFIG.CONFIG_VALUE_MODEL> CreateModelList(ref IQueryable<Apps.Models.CONFIG_VALUE> queryData)
		{

			List<Apps.Models.SCV.CONFIG.CONFIG_VALUE_MODEL> modelList = (from r in queryData
											  select new Apps.Models.SCV.CONFIG.CONFIG_VALUE_MODEL
											  {
													OBJECT_ID = r.OBJECT_ID,
													RECORD_TYPE = r.RECORD_TYPE,
													IDENTIFIER = r.IDENTIFIER,
													VALUE = r.VALUE,
													DESCRIPTION = r.DESCRIPTION,
													ACTIVE = r.ACTIVE,
													SYSTEM_CREATED = r.SYSTEM_CREATED,
          
											  }).ToList();

			return modelList;
		}

		public virtual void Create(ref ValidationErrors errors, Apps.Models.SCV.CONFIG.CONFIG_VALUE_MODEL model)
		{
				Apps.Models.CONFIG_VALUE entity = m_Rep.GetById(model.OBJECT_ID);
				if (entity != null)
				{
					errors.Add(Resource.PrimaryRepeat);
					return;
				}
				entity = new Apps.Models.CONFIG_VALUE();
			   				entity.OBJECT_ID = model.OBJECT_ID;
				entity.RECORD_TYPE = model.RECORD_TYPE;
				entity.IDENTIFIER = model.IDENTIFIER;
				entity.VALUE = model.VALUE;
				entity.DESCRIPTION = model.DESCRIPTION;
				entity.ACTIVE = model.ACTIVE;
				entity.SYSTEM_CREATED = model.SYSTEM_CREATED;
  
				m_Rep.Create(entity);
		}



		 public virtual void RemoveById(ref ValidationErrors errors, string id)
		{
			
				m_Rep.RemoveById(id);
			
		}

		public virtual void RemoveByIds(ref ValidationErrors errors, string[] deleteCollection)
		{
				if (deleteCollection != null)
				{
				   //事务批量删除
				   // using (TransactionScope transactionScope = new TransactionScope())
				   // {
				   //     if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
				   //     {
				   //         transactionScope.Complete();
				   //         return true;
				   //     }
				   //    else
				   //     {
				   //         Transaction.Current.Rollback();
				   //         return false;
				   //     }
				   // }
				   m_Rep.RemoveById(deleteCollection);
				}
		}

		
	   

		public virtual void Modify(ref ValidationErrors errors, Apps.Models.SCV.CONFIG.CONFIG_VALUE_MODEL model,params string[] updateProperties)
		{
				Apps.Models.CONFIG_VALUE entity = m_Rep.GetById(model.OBJECT_ID);
				if (entity == null)
				{
					errors.Add(Resource.Disable);
					return;
				}
							  				if (updateProperties.Count() <= 0){
										entity.OBJECT_ID = model.OBJECT_ID;
											entity.RECORD_TYPE = model.RECORD_TYPE;
											entity.IDENTIFIER = model.IDENTIFIER;
											entity.VALUE = model.VALUE;
											entity.DESCRIPTION = model.DESCRIPTION;
											entity.ACTIVE = model.ACTIVE;
											entity.SYSTEM_CREATED = model.SYSTEM_CREATED;
									}else{
					
						Type type = typeof(Apps.Models.SCV.CONFIG.CONFIG_VALUE_MODEL);
						Type typeE = typeof(Apps.Models.CONFIG_VALUE);
						foreach (var item in updateProperties) {
						System.Reflection.PropertyInfo pi = type.GetProperty(item);
						System.Reflection.PropertyInfo piE = typeE.GetProperty(item);
						piE.SetValue(entity,pi.GetValue(model),null);
				}
				}
				 

				m_Rep.Modify(entity,updateProperties);
		}

	  

		public virtual Apps.Models.SCV.CONFIG.CONFIG_VALUE_MODEL GetById(string id)
		{
			Apps.Models.CONFIG_VALUE entity = m_Rep.GetById(id);
			if (entity!=null)
			{
				//CONFIG_VALUE entity = m_Rep.GetById(id);
				Apps.Models.SCV.CONFIG.CONFIG_VALUE_MODEL model = new Apps.Models.SCV.CONFIG.CONFIG_VALUE_MODEL();
							  				model.OBJECT_ID = entity.OBJECT_ID;
				model.RECORD_TYPE = entity.RECORD_TYPE;
				model.IDENTIFIER = entity.IDENTIFIER;
				model.VALUE = entity.VALUE;
				model.DESCRIPTION = entity.DESCRIPTION;
				model.ACTIVE = entity.ACTIVE;
				model.SYSTEM_CREATED = entity.SYSTEM_CREATED;
 
				return model;
			}
			else
			{
				return null;
			}
		}

	 

	}
}
