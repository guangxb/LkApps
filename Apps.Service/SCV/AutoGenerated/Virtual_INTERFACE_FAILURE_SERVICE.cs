//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Microsoft.Practices.Unity;
using System.Transactions;
using Apps.Locale;
using System.Linq.Expressions;
namespace Apps.Service.SCV.INTERFACE
{
	public class Virtual_INTERFACE_FAILURE_SERVICE
	{

		public Apps.IRepository.SCV.ISCVDBSession SCVDBSession{
			 get
			{
				return Service.SCV.SCVDBSessionFactory.GetDBSession();
			}
		}
	   
		public Apps.IRepository.SCV.INTERFACE.IINTERFACE_FAILURE_REPOSITORY m_Rep{
			 get
			{
				return SCVDBSession.INTERFACE_FAILURE;
			}
		}
		

		public virtual List<Apps.Models.SCV.INTERFACE.INTERFACE_FAILURE_MODEL> GetList(Expression<Func<Apps.Models.INTERFACE_FAILURE, bool>> where = null){
		
				IQueryable<Apps.Models.INTERFACE_FAILURE> queryData = m_Rep.GetList(where);
				return CreateModelList(ref queryData);
		}

		public virtual List<Apps.Models.SCV.INTERFACE.INTERFACE_FAILURE_MODEL> GetListSort<TKey>(Expression<Func<Apps.Models.INTERFACE_FAILURE, bool>> where,Expression<Func<Apps.Models.INTERFACE_FAILURE, TKey>>orderBy, bool isAsc = true){
		
				IQueryable<Apps.Models.INTERFACE_FAILURE> queryData = m_Rep.GetListSort(where, orderBy, isAsc);
				return CreateModelList(ref queryData);
		}

		public virtual List<Apps.Models.SCV.INTERFACE.INTERFACE_FAILURE_MODEL> GetList(ref GridPager pager, string queryStr,Expression<Func<Apps.Models.INTERFACE_FAILURE, bool>> where = null)
		{

			IQueryable<Apps.Models.INTERFACE_FAILURE> queryData;
			
			if (!string.IsNullOrWhiteSpace(queryStr))
			{
				queryData = m_Rep.GetList(where
								
								,a=>a.INTERFACE_TYPE.Contains(queryStr)
								|| a.DIRECTION.Contains(queryStr)
								|| a.INTERFACE_RECORD_ID.Contains(queryStr)
								|| a.WAREHOUSE.Contains(queryStr)
								|| a.REFERENCE_ID.Contains(queryStr)
								
								|| a.MESSAGE.Contains(queryStr)
								
								
								
								|| a.PROCESS_STAMP.Contains(queryStr)
								);
			}else{
				queryData = m_Rep.GetList(where);
			}
			
		  
			pager.totalRows = queryData.Count();
			//排序
			queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
			return CreateModelList(ref queryData);
		}
		public virtual List<Apps.Models.SCV.INTERFACE.INTERFACE_FAILURE_MODEL> CreateModelList(ref IQueryable<Apps.Models.INTERFACE_FAILURE> queryData)
		{

			List<Apps.Models.SCV.INTERFACE.INTERFACE_FAILURE_MODEL> modelList = (from r in queryData
											  select new Apps.Models.SCV.INTERFACE.INTERFACE_FAILURE_MODEL
											  {
													INTERNAL_NUM = r.INTERNAL_NUM,
													INTERFACE_TYPE = r.INTERFACE_TYPE,
													DIRECTION = r.DIRECTION,
													INTERFACE_RECORD_ID = r.INTERFACE_RECORD_ID,
													WAREHOUSE = r.WAREHOUSE,
													REFERENCE_ID = r.REFERENCE_ID,
													REFERENCE_LINE_NUM = r.REFERENCE_LINE_NUM,
													MESSAGE = r.MESSAGE,
													RETRY_TIMES = r.RETRY_TIMES,
													CREATE_DATE_TIME = r.CREATE_DATE_TIME,
													LAST_UPDATE_DATE_TIME = r.LAST_UPDATE_DATE_TIME,
													PROCESS_STAMP = r.PROCESS_STAMP,
          
											  }).ToList();

			return modelList;
		}

		public virtual void Create(ref ValidationErrors errors, Apps.Models.SCV.INTERFACE.INTERFACE_FAILURE_MODEL model)
		{
				Apps.Models.INTERFACE_FAILURE entity = m_Rep.GetById(model.INTERNAL_NUM);
				if (entity != null)
				{
					errors.Add(Resource.PrimaryRepeat);
					return;
				}
				entity = new Apps.Models.INTERFACE_FAILURE();
			   				entity.INTERNAL_NUM = model.INTERNAL_NUM;
				entity.INTERFACE_TYPE = model.INTERFACE_TYPE;
				entity.DIRECTION = model.DIRECTION;
				entity.INTERFACE_RECORD_ID = model.INTERFACE_RECORD_ID;
				entity.WAREHOUSE = model.WAREHOUSE;
				entity.REFERENCE_ID = model.REFERENCE_ID;
				entity.REFERENCE_LINE_NUM = model.REFERENCE_LINE_NUM;
				entity.MESSAGE = model.MESSAGE;
				entity.RETRY_TIMES = model.RETRY_TIMES;
				entity.CREATE_DATE_TIME = model.CREATE_DATE_TIME;
				entity.LAST_UPDATE_DATE_TIME = model.LAST_UPDATE_DATE_TIME;
				entity.PROCESS_STAMP = model.PROCESS_STAMP;
  
				m_Rep.Create(entity);
		}



		 public virtual void RemoveById(ref ValidationErrors errors, string id)
		{
			
				m_Rep.RemoveById(id);
			
		}

		public virtual void RemoveByIds(ref ValidationErrors errors, string[] deleteCollection)
		{
				if (deleteCollection != null)
				{
				   //事务批量删除
				   // using (TransactionScope transactionScope = new TransactionScope())
				   // {
				   //     if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
				   //     {
				   //         transactionScope.Complete();
				   //         return true;
				   //     }
				   //    else
				   //     {
				   //         Transaction.Current.Rollback();
				   //         return false;
				   //     }
				   // }
				   m_Rep.RemoveById(deleteCollection);
				}
		}

		
	   

		public virtual void Modify(ref ValidationErrors errors, Apps.Models.SCV.INTERFACE.INTERFACE_FAILURE_MODEL model,params string[] updateProperties)
		{
				Apps.Models.INTERFACE_FAILURE entity = m_Rep.GetById(model.INTERNAL_NUM);
				if (entity == null)
				{
					errors.Add(Resource.Disable);
					return;
				}
							  				if (updateProperties.Count() <= 0){
										entity.INTERNAL_NUM = model.INTERNAL_NUM;
											entity.INTERFACE_TYPE = model.INTERFACE_TYPE;
											entity.DIRECTION = model.DIRECTION;
											entity.INTERFACE_RECORD_ID = model.INTERFACE_RECORD_ID;
											entity.WAREHOUSE = model.WAREHOUSE;
											entity.REFERENCE_ID = model.REFERENCE_ID;
											entity.REFERENCE_LINE_NUM = model.REFERENCE_LINE_NUM;
											entity.MESSAGE = model.MESSAGE;
											entity.RETRY_TIMES = model.RETRY_TIMES;
											entity.CREATE_DATE_TIME = model.CREATE_DATE_TIME;
											entity.LAST_UPDATE_DATE_TIME = model.LAST_UPDATE_DATE_TIME;
											entity.PROCESS_STAMP = model.PROCESS_STAMP;
									}else{
					
						Type type = typeof(Apps.Models.SCV.INTERFACE.INTERFACE_FAILURE_MODEL);
						Type typeE = typeof(Apps.Models.INTERFACE_FAILURE);
						foreach (var item in updateProperties) {
						System.Reflection.PropertyInfo pi = type.GetProperty(item);
						System.Reflection.PropertyInfo piE = typeE.GetProperty(item);
						piE.SetValue(entity,pi.GetValue(model),null);
				}
				}
				 

				m_Rep.Modify(entity,updateProperties);
		}

	  

		public virtual Apps.Models.SCV.INTERFACE.INTERFACE_FAILURE_MODEL GetById(string id)
		{
			Apps.Models.INTERFACE_FAILURE entity = m_Rep.GetById(id);
			if (entity!=null)
			{
				//INTERFACE_FAILURE entity = m_Rep.GetById(id);
				Apps.Models.SCV.INTERFACE.INTERFACE_FAILURE_MODEL model = new Apps.Models.SCV.INTERFACE.INTERFACE_FAILURE_MODEL();
							  				model.INTERNAL_NUM = entity.INTERNAL_NUM;
				model.INTERFACE_TYPE = entity.INTERFACE_TYPE;
				model.DIRECTION = entity.DIRECTION;
				model.INTERFACE_RECORD_ID = entity.INTERFACE_RECORD_ID;
				model.WAREHOUSE = entity.WAREHOUSE;
				model.REFERENCE_ID = entity.REFERENCE_ID;
				model.REFERENCE_LINE_NUM = entity.REFERENCE_LINE_NUM;
				model.MESSAGE = entity.MESSAGE;
				model.RETRY_TIMES = entity.RETRY_TIMES;
				model.CREATE_DATE_TIME = entity.CREATE_DATE_TIME;
				model.LAST_UPDATE_DATE_TIME = entity.LAST_UPDATE_DATE_TIME;
				model.PROCESS_STAMP = entity.PROCESS_STAMP;
 
				return model;
			}
			else
			{
				return null;
			}
		}

	 

	}
}
