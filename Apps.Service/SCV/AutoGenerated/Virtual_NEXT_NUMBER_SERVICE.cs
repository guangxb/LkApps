//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Microsoft.Practices.Unity;
using System.Transactions;
using Apps.Locale;
using System.Linq.Expressions;
namespace Apps.Service.SCV.NEXT
{
	public class Virtual_NEXT_NUMBER_SERVICE
	{

		public Apps.IRepository.SCV.ISCVDBSession SCVDBSession{
			 get
			{
				return Service.SCV.SCVDBSessionFactory.GetDBSession();
			}
		}
	   
		public Apps.IRepository.SCV.NEXT.INEXT_NUMBER_REPOSITORY m_Rep{
			 get
			{
				return SCVDBSession.NEXT_NUMBER;
			}
		}
		

		public virtual List<Apps.Models.SCV.NEXT.NEXT_NUMBER_MODEL> GetList(Expression<Func<Apps.Models.NEXT_NUMBER, bool>> where = null){
		
				IQueryable<Apps.Models.NEXT_NUMBER> queryData = m_Rep.GetList(where);
				return CreateModelList(ref queryData);
		}

		public virtual List<Apps.Models.SCV.NEXT.NEXT_NUMBER_MODEL> GetListSort<TKey>(Expression<Func<Apps.Models.NEXT_NUMBER, bool>> where,Expression<Func<Apps.Models.NEXT_NUMBER, TKey>>orderBy, bool isAsc = true){
		
				IQueryable<Apps.Models.NEXT_NUMBER> queryData = m_Rep.GetListSort(where, orderBy, isAsc);
				return CreateModelList(ref queryData);
		}

		public virtual List<Apps.Models.SCV.NEXT.NEXT_NUMBER_MODEL> GetList(ref GridPager pager, string queryStr,Expression<Func<Apps.Models.NEXT_NUMBER, bool>> where = null)
		{

			IQueryable<Apps.Models.NEXT_NUMBER> queryData;
			
			if (!string.IsNullOrWhiteSpace(queryStr))
			{
				queryData = m_Rep.GetList(where
								,a=>a.NEXT_NUM_KEY.Contains(queryStr)
								|| a.NEXT_NUM.Contains(queryStr)
								|| a.PREFIX.Contains(queryStr)
								|| a.SUFFIX.Contains(queryStr)
								|| a.SYSTEM_CREATED.Contains(queryStr)
								|| a.USER_STAMP.Contains(queryStr)
								
								|| a.RESET_BY_DAY.Contains(queryStr)
								|| a.MIN_VALUE.Contains(queryStr)
								|| a.MAX_VALUE.Contains(queryStr)
								
								|| a.PADDING_POS.Contains(queryStr)
								|| a.PADDING_CHAR.Contains(queryStr)
								|| a.RESET_BY_MONTH.Contains(queryStr)
								|| a.RESET_BY_YEAR.Contains(queryStr)
								|| a.RESET_BY_WEEK.Contains(queryStr)
								
								|| a.USER_DEF1.Contains(queryStr)
								|| a.USER_DEF2.Contains(queryStr)
								|| a.USER_DEF3.Contains(queryStr)
								|| a.USER_DEF4.Contains(queryStr)
								|| a.USER_DEF5.Contains(queryStr)
								|| a.USER_DEF6.Contains(queryStr)
								|| a.USER_DEF7.Contains(queryStr)
								|| a.USER_DEF8.Contains(queryStr)
								);
			}else{
				queryData = m_Rep.GetList(where);
			}
			
		  
			pager.totalRows = queryData.Count();
			//排序
			queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
			return CreateModelList(ref queryData);
		}
		public virtual List<Apps.Models.SCV.NEXT.NEXT_NUMBER_MODEL> CreateModelList(ref IQueryable<Apps.Models.NEXT_NUMBER> queryData)
		{

			List<Apps.Models.SCV.NEXT.NEXT_NUMBER_MODEL> modelList = (from r in queryData
											  select new Apps.Models.SCV.NEXT.NEXT_NUMBER_MODEL
											  {
													NEXT_NUM_KEY = r.NEXT_NUM_KEY,
													NEXT_NUM = r.NEXT_NUM,
													PREFIX = r.PREFIX,
													SUFFIX = r.SUFFIX,
													SYSTEM_CREATED = r.SYSTEM_CREATED,
													USER_STAMP = r.USER_STAMP,
													DATE_TIME_STAMP = r.DATE_TIME_STAMP,
													RESET_BY_DAY = r.RESET_BY_DAY,
													MIN_VALUE = r.MIN_VALUE,
													MAX_VALUE = r.MAX_VALUE,
													LENGTH = r.LENGTH,
													PADDING_POS = r.PADDING_POS,
													PADDING_CHAR = r.PADDING_CHAR,
													RESET_BY_MONTH = r.RESET_BY_MONTH,
													RESET_BY_YEAR = r.RESET_BY_YEAR,
													RESET_BY_WEEK = r.RESET_BY_WEEK,
													LAST_NUM_DATE = r.LAST_NUM_DATE,
													USER_DEF1 = r.USER_DEF1,
													USER_DEF2 = r.USER_DEF2,
													USER_DEF3 = r.USER_DEF3,
													USER_DEF4 = r.USER_DEF4,
													USER_DEF5 = r.USER_DEF5,
													USER_DEF6 = r.USER_DEF6,
													USER_DEF7 = r.USER_DEF7,
													USER_DEF8 = r.USER_DEF8,
          
											  }).ToList();

			return modelList;
		}

		public virtual void Create(ref ValidationErrors errors, Apps.Models.SCV.NEXT.NEXT_NUMBER_MODEL model)
		{
				Apps.Models.NEXT_NUMBER entity = m_Rep.GetById(model.NEXT_NUM_KEY);
				if (entity != null)
				{
					errors.Add(Resource.PrimaryRepeat);
					return;
				}
				entity = new Apps.Models.NEXT_NUMBER();
			   				entity.NEXT_NUM_KEY = model.NEXT_NUM_KEY;
				entity.NEXT_NUM = model.NEXT_NUM;
				entity.PREFIX = model.PREFIX;
				entity.SUFFIX = model.SUFFIX;
				entity.SYSTEM_CREATED = model.SYSTEM_CREATED;
				entity.USER_STAMP = model.USER_STAMP;
				entity.DATE_TIME_STAMP = model.DATE_TIME_STAMP;
				entity.RESET_BY_DAY = model.RESET_BY_DAY;
				entity.MIN_VALUE = model.MIN_VALUE;
				entity.MAX_VALUE = model.MAX_VALUE;
				entity.LENGTH = model.LENGTH;
				entity.PADDING_POS = model.PADDING_POS;
				entity.PADDING_CHAR = model.PADDING_CHAR;
				entity.RESET_BY_MONTH = model.RESET_BY_MONTH;
				entity.RESET_BY_YEAR = model.RESET_BY_YEAR;
				entity.RESET_BY_WEEK = model.RESET_BY_WEEK;
				entity.LAST_NUM_DATE = model.LAST_NUM_DATE;
				entity.USER_DEF1 = model.USER_DEF1;
				entity.USER_DEF2 = model.USER_DEF2;
				entity.USER_DEF3 = model.USER_DEF3;
				entity.USER_DEF4 = model.USER_DEF4;
				entity.USER_DEF5 = model.USER_DEF5;
				entity.USER_DEF6 = model.USER_DEF6;
				entity.USER_DEF7 = model.USER_DEF7;
				entity.USER_DEF8 = model.USER_DEF8;
  
				m_Rep.Create(entity);
		}



		 public virtual void RemoveById(ref ValidationErrors errors, string id)
		{
			
				m_Rep.RemoveById(id);
			
		}

		public virtual void RemoveByIds(ref ValidationErrors errors, string[] deleteCollection)
		{
				if (deleteCollection != null)
				{
				   //事务批量删除
				   // using (TransactionScope transactionScope = new TransactionScope())
				   // {
				   //     if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
				   //     {
				   //         transactionScope.Complete();
				   //         return true;
				   //     }
				   //    else
				   //     {
				   //         Transaction.Current.Rollback();
				   //         return false;
				   //     }
				   // }
				   m_Rep.RemoveById(deleteCollection);
				}
		}

		
	   

		public virtual void Modify(ref ValidationErrors errors, Apps.Models.SCV.NEXT.NEXT_NUMBER_MODEL model,params string[] updateProperties)
		{
				Apps.Models.NEXT_NUMBER entity = m_Rep.GetById(model.NEXT_NUM_KEY);
				if (entity == null)
				{
					errors.Add(Resource.Disable);
					return;
				}
							  				if (updateProperties.Count() <= 0){
										entity.NEXT_NUM_KEY = model.NEXT_NUM_KEY;
											entity.NEXT_NUM = model.NEXT_NUM;
											entity.PREFIX = model.PREFIX;
											entity.SUFFIX = model.SUFFIX;
											entity.SYSTEM_CREATED = model.SYSTEM_CREATED;
											entity.USER_STAMP = model.USER_STAMP;
											entity.DATE_TIME_STAMP = model.DATE_TIME_STAMP;
											entity.RESET_BY_DAY = model.RESET_BY_DAY;
											entity.MIN_VALUE = model.MIN_VALUE;
											entity.MAX_VALUE = model.MAX_VALUE;
											entity.LENGTH = model.LENGTH;
											entity.PADDING_POS = model.PADDING_POS;
											entity.PADDING_CHAR = model.PADDING_CHAR;
											entity.RESET_BY_MONTH = model.RESET_BY_MONTH;
											entity.RESET_BY_YEAR = model.RESET_BY_YEAR;
											entity.RESET_BY_WEEK = model.RESET_BY_WEEK;
											entity.LAST_NUM_DATE = model.LAST_NUM_DATE;
											entity.USER_DEF1 = model.USER_DEF1;
											entity.USER_DEF2 = model.USER_DEF2;
											entity.USER_DEF3 = model.USER_DEF3;
											entity.USER_DEF4 = model.USER_DEF4;
											entity.USER_DEF5 = model.USER_DEF5;
											entity.USER_DEF6 = model.USER_DEF6;
											entity.USER_DEF7 = model.USER_DEF7;
											entity.USER_DEF8 = model.USER_DEF8;
									}else{
					
						Type type = typeof(Apps.Models.SCV.NEXT.NEXT_NUMBER_MODEL);
						Type typeE = typeof(Apps.Models.NEXT_NUMBER);
						foreach (var item in updateProperties) {
						System.Reflection.PropertyInfo pi = type.GetProperty(item);
						System.Reflection.PropertyInfo piE = typeE.GetProperty(item);
						piE.SetValue(entity,pi.GetValue(model),null);
				}
				}
				 

				m_Rep.Modify(entity,updateProperties);
		}

	  

		public virtual Apps.Models.SCV.NEXT.NEXT_NUMBER_MODEL GetById(string id)
		{
			Apps.Models.NEXT_NUMBER entity = m_Rep.GetById(id);
			if (entity!=null)
			{
				//NEXT_NUMBER entity = m_Rep.GetById(id);
				Apps.Models.SCV.NEXT.NEXT_NUMBER_MODEL model = new Apps.Models.SCV.NEXT.NEXT_NUMBER_MODEL();
							  				model.NEXT_NUM_KEY = entity.NEXT_NUM_KEY;
				model.NEXT_NUM = entity.NEXT_NUM;
				model.PREFIX = entity.PREFIX;
				model.SUFFIX = entity.SUFFIX;
				model.SYSTEM_CREATED = entity.SYSTEM_CREATED;
				model.USER_STAMP = entity.USER_STAMP;
				model.DATE_TIME_STAMP = entity.DATE_TIME_STAMP;
				model.RESET_BY_DAY = entity.RESET_BY_DAY;
				model.MIN_VALUE = entity.MIN_VALUE;
				model.MAX_VALUE = entity.MAX_VALUE;
				model.LENGTH = entity.LENGTH;
				model.PADDING_POS = entity.PADDING_POS;
				model.PADDING_CHAR = entity.PADDING_CHAR;
				model.RESET_BY_MONTH = entity.RESET_BY_MONTH;
				model.RESET_BY_YEAR = entity.RESET_BY_YEAR;
				model.RESET_BY_WEEK = entity.RESET_BY_WEEK;
				model.LAST_NUM_DATE = entity.LAST_NUM_DATE;
				model.USER_DEF1 = entity.USER_DEF1;
				model.USER_DEF2 = entity.USER_DEF2;
				model.USER_DEF3 = entity.USER_DEF3;
				model.USER_DEF4 = entity.USER_DEF4;
				model.USER_DEF5 = entity.USER_DEF5;
				model.USER_DEF6 = entity.USER_DEF6;
				model.USER_DEF7 = entity.USER_DEF7;
				model.USER_DEF8 = entity.USER_DEF8;
 
				return model;
			}
			else
			{
				return null;
			}
		}

	 

	}
}
