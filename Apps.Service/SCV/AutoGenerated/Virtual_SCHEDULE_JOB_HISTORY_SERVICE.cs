//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Microsoft.Practices.Unity;
using System.Transactions;
using Apps.Locale;
using System.Linq.Expressions;
namespace Apps.Service.SCV.SCHEDULE
{
	public class Virtual_SCHEDULE_JOB_HISTORY_SERVICE
	{

		public Apps.IRepository.SCV.ISCVDBSession SCVDBSession{
			 get
			{
				return Service.SCV.SCVDBSessionFactory.GetDBSession();
			}
		}
	   
		public Apps.IRepository.SCV.SCHEDULE.ISCHEDULE_JOB_HISTORY_REPOSITORY m_Rep{
			 get
			{
				return SCVDBSession.SCHEDULE_JOB_HISTORY;
			}
		}
		

		public virtual List<Apps.Models.SCV.SCHEDULE.SCHEDULE_JOB_HISTORY_MODEL> GetList(Expression<Func<Apps.Models.SCHEDULE_JOB_HISTORY, bool>> where = null){
		
				IQueryable<Apps.Models.SCHEDULE_JOB_HISTORY> queryData = m_Rep.GetList(where);
				return CreateModelList(ref queryData);
		}

		public virtual List<Apps.Models.SCV.SCHEDULE.SCHEDULE_JOB_HISTORY_MODEL> GetListSort<TKey>(Expression<Func<Apps.Models.SCHEDULE_JOB_HISTORY, bool>> where,Expression<Func<Apps.Models.SCHEDULE_JOB_HISTORY, TKey>>orderBy, bool isAsc = true){
		
				IQueryable<Apps.Models.SCHEDULE_JOB_HISTORY> queryData = m_Rep.GetListSort(where, orderBy, isAsc);
				return CreateModelList(ref queryData);
		}

		public virtual List<Apps.Models.SCV.SCHEDULE.SCHEDULE_JOB_HISTORY_MODEL> GetList(ref GridPager pager, string queryStr,Expression<Func<Apps.Models.SCHEDULE_JOB_HISTORY, bool>> where = null)
		{

			IQueryable<Apps.Models.SCHEDULE_JOB_HISTORY> queryData;
			
			if (!string.IsNullOrWhiteSpace(queryStr))
			{
				queryData = m_Rep.GetList(where
								
								,a=>a.JOB_NAME.Contains(queryStr)
								|| a.JOB_GROUP.Contains(queryStr)
								|| a.DESCRIPTION.Contains(queryStr)
								|| a.JOB_TYPE.Contains(queryStr)
								|| a.ACTION.Contains(queryStr)
								|| a.USER_STAMP.Contains(queryStr)
								
								|| a.STATUS.Contains(queryStr)
								|| a.MESSAGE.Contains(queryStr)
								|| a.PARA1_VALUE.Contains(queryStr)
								|| a.PARA2_VALUE.Contains(queryStr)
								|| a.PARA3_VALUE.Contains(queryStr)
								|| a.PARA4_VALUE.Contains(queryStr)
								|| a.PARA5_VALUE.Contains(queryStr)
								|| a.PARA6_VALUE.Contains(queryStr)
								|| a.PARA7_VALUE.Contains(queryStr)
								|| a.PARA8_VALUE.Contains(queryStr)
								);
			}else{
				queryData = m_Rep.GetList(where);
			}
			
		  
			pager.totalRows = queryData.Count();
			//排序
			queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
			return CreateModelList(ref queryData);
		}
		public virtual List<Apps.Models.SCV.SCHEDULE.SCHEDULE_JOB_HISTORY_MODEL> CreateModelList(ref IQueryable<Apps.Models.SCHEDULE_JOB_HISTORY> queryData)
		{

			List<Apps.Models.SCV.SCHEDULE.SCHEDULE_JOB_HISTORY_MODEL> modelList = (from r in queryData
											  select new Apps.Models.SCV.SCHEDULE.SCHEDULE_JOB_HISTORY_MODEL
											  {
													INTERNAL_NUM = r.INTERNAL_NUM,
													JOB_NAME = r.JOB_NAME,
													JOB_GROUP = r.JOB_GROUP,
													DESCRIPTION = r.DESCRIPTION,
													JOB_TYPE = r.JOB_TYPE,
													ACTION = r.ACTION,
													USER_STAMP = r.USER_STAMP,
													DATE_TIME_STAMP = r.DATE_TIME_STAMP,
													STATUS = r.STATUS,
													MESSAGE = r.MESSAGE,
													PARA1_VALUE = r.PARA1_VALUE,
													PARA2_VALUE = r.PARA2_VALUE,
													PARA3_VALUE = r.PARA3_VALUE,
													PARA4_VALUE = r.PARA4_VALUE,
													PARA5_VALUE = r.PARA5_VALUE,
													PARA6_VALUE = r.PARA6_VALUE,
													PARA7_VALUE = r.PARA7_VALUE,
													PARA8_VALUE = r.PARA8_VALUE,
          
											  }).ToList();

			return modelList;
		}

		public virtual void Create(ref ValidationErrors errors, Apps.Models.SCV.SCHEDULE.SCHEDULE_JOB_HISTORY_MODEL model)
		{
				Apps.Models.SCHEDULE_JOB_HISTORY entity = m_Rep.GetById(model.INTERNAL_NUM);
				if (entity != null)
				{
					errors.Add(Resource.PrimaryRepeat);
					return;
				}
				entity = new Apps.Models.SCHEDULE_JOB_HISTORY();
			   				entity.INTERNAL_NUM = model.INTERNAL_NUM;
				entity.JOB_NAME = model.JOB_NAME;
				entity.JOB_GROUP = model.JOB_GROUP;
				entity.DESCRIPTION = model.DESCRIPTION;
				entity.JOB_TYPE = model.JOB_TYPE;
				entity.ACTION = model.ACTION;
				entity.USER_STAMP = model.USER_STAMP;
				entity.DATE_TIME_STAMP = model.DATE_TIME_STAMP;
				entity.STATUS = model.STATUS;
				entity.MESSAGE = model.MESSAGE;
				entity.PARA1_VALUE = model.PARA1_VALUE;
				entity.PARA2_VALUE = model.PARA2_VALUE;
				entity.PARA3_VALUE = model.PARA3_VALUE;
				entity.PARA4_VALUE = model.PARA4_VALUE;
				entity.PARA5_VALUE = model.PARA5_VALUE;
				entity.PARA6_VALUE = model.PARA6_VALUE;
				entity.PARA7_VALUE = model.PARA7_VALUE;
				entity.PARA8_VALUE = model.PARA8_VALUE;
  
				m_Rep.Create(entity);
		}



		 public virtual void RemoveById(ref ValidationErrors errors, string id)
		{
			
				m_Rep.RemoveById(id);
			
		}

		public virtual void RemoveByIds(ref ValidationErrors errors, string[] deleteCollection)
		{
				if (deleteCollection != null)
				{
				   //事务批量删除
				   // using (TransactionScope transactionScope = new TransactionScope())
				   // {
				   //     if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
				   //     {
				   //         transactionScope.Complete();
				   //         return true;
				   //     }
				   //    else
				   //     {
				   //         Transaction.Current.Rollback();
				   //         return false;
				   //     }
				   // }
				   m_Rep.RemoveById(deleteCollection);
				}
		}

		
	   

		public virtual void Modify(ref ValidationErrors errors, Apps.Models.SCV.SCHEDULE.SCHEDULE_JOB_HISTORY_MODEL model,params string[] updateProperties)
		{
				Apps.Models.SCHEDULE_JOB_HISTORY entity = m_Rep.GetById(model.INTERNAL_NUM);
				if (entity == null)
				{
					errors.Add(Resource.Disable);
					return;
				}
							  				if (updateProperties.Count() <= 0){
										entity.INTERNAL_NUM = model.INTERNAL_NUM;
											entity.JOB_NAME = model.JOB_NAME;
											entity.JOB_GROUP = model.JOB_GROUP;
											entity.DESCRIPTION = model.DESCRIPTION;
											entity.JOB_TYPE = model.JOB_TYPE;
											entity.ACTION = model.ACTION;
											entity.USER_STAMP = model.USER_STAMP;
											entity.DATE_TIME_STAMP = model.DATE_TIME_STAMP;
											entity.STATUS = model.STATUS;
											entity.MESSAGE = model.MESSAGE;
											entity.PARA1_VALUE = model.PARA1_VALUE;
											entity.PARA2_VALUE = model.PARA2_VALUE;
											entity.PARA3_VALUE = model.PARA3_VALUE;
											entity.PARA4_VALUE = model.PARA4_VALUE;
											entity.PARA5_VALUE = model.PARA5_VALUE;
											entity.PARA6_VALUE = model.PARA6_VALUE;
											entity.PARA7_VALUE = model.PARA7_VALUE;
											entity.PARA8_VALUE = model.PARA8_VALUE;
									}else{
					
						Type type = typeof(Apps.Models.SCV.SCHEDULE.SCHEDULE_JOB_HISTORY_MODEL);
						Type typeE = typeof(Apps.Models.SCHEDULE_JOB_HISTORY);
						foreach (var item in updateProperties) {
						System.Reflection.PropertyInfo pi = type.GetProperty(item);
						System.Reflection.PropertyInfo piE = typeE.GetProperty(item);
						piE.SetValue(entity,pi.GetValue(model),null);
				}
				}
				 

				m_Rep.Modify(entity,updateProperties);
		}

	  

		public virtual Apps.Models.SCV.SCHEDULE.SCHEDULE_JOB_HISTORY_MODEL GetById(string id)
		{
			Apps.Models.SCHEDULE_JOB_HISTORY entity = m_Rep.GetById(id);
			if (entity!=null)
			{
				//SCHEDULE_JOB_HISTORY entity = m_Rep.GetById(id);
				Apps.Models.SCV.SCHEDULE.SCHEDULE_JOB_HISTORY_MODEL model = new Apps.Models.SCV.SCHEDULE.SCHEDULE_JOB_HISTORY_MODEL();
							  				model.INTERNAL_NUM = entity.INTERNAL_NUM;
				model.JOB_NAME = entity.JOB_NAME;
				model.JOB_GROUP = entity.JOB_GROUP;
				model.DESCRIPTION = entity.DESCRIPTION;
				model.JOB_TYPE = entity.JOB_TYPE;
				model.ACTION = entity.ACTION;
				model.USER_STAMP = entity.USER_STAMP;
				model.DATE_TIME_STAMP = entity.DATE_TIME_STAMP;
				model.STATUS = entity.STATUS;
				model.MESSAGE = entity.MESSAGE;
				model.PARA1_VALUE = entity.PARA1_VALUE;
				model.PARA2_VALUE = entity.PARA2_VALUE;
				model.PARA3_VALUE = entity.PARA3_VALUE;
				model.PARA4_VALUE = entity.PARA4_VALUE;
				model.PARA5_VALUE = entity.PARA5_VALUE;
				model.PARA6_VALUE = entity.PARA6_VALUE;
				model.PARA7_VALUE = entity.PARA7_VALUE;
				model.PARA8_VALUE = entity.PARA8_VALUE;
 
				return model;
			}
			else
			{
				return null;
			}
		}

	 

	}
}
