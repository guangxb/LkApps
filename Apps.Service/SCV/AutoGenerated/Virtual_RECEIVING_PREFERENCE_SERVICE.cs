//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Microsoft.Practices.Unity;
using System.Transactions;
using Apps.Locale;
using System.Linq.Expressions;
namespace Apps.Service.SCV.RECEIVING
{
	public class Virtual_RECEIVING_PREFERENCE_SERVICE
	{

		public Apps.IRepository.SCV.ISCVDBSession SCVDBSession{
			 get
			{
				return Service.SCV.SCVDBSessionFactory.GetDBSession();
			}
		}
	   
		public Apps.IRepository.SCV.RECEIVING.IRECEIVING_PREFERENCE_REPOSITORY m_Rep{
			 get
			{
				return SCVDBSession.RECEIVING_PREFERENCE;
			}
		}
		

		public virtual List<Apps.Models.SCV.RECEIVING.RECEIVING_PREFERENCE_MODEL> GetList(Expression<Func<Apps.Models.RECEIVING_PREFERENCE, bool>> where = null){
		
				IQueryable<Apps.Models.RECEIVING_PREFERENCE> queryData = m_Rep.GetList(where);
				return CreateModelList(ref queryData);
		}

		public virtual List<Apps.Models.SCV.RECEIVING.RECEIVING_PREFERENCE_MODEL> GetListSort<TKey>(Expression<Func<Apps.Models.RECEIVING_PREFERENCE, bool>> where,Expression<Func<Apps.Models.RECEIVING_PREFERENCE, TKey>>orderBy, bool isAsc = true){
		
				IQueryable<Apps.Models.RECEIVING_PREFERENCE> queryData = m_Rep.GetListSort(where, orderBy, isAsc);
				return CreateModelList(ref queryData);
		}

		public virtual List<Apps.Models.SCV.RECEIVING.RECEIVING_PREFERENCE_MODEL> GetList(ref GridPager pager, string queryStr,Expression<Func<Apps.Models.RECEIVING_PREFERENCE, bool>> where = null)
		{

			IQueryable<Apps.Models.RECEIVING_PREFERENCE> queryData;
			
			if (!string.IsNullOrWhiteSpace(queryStr))
			{
				queryData = m_Rep.GetList(where
								
								,a=>a.PREFERENCE_NAME.Contains(queryStr)
								|| a.WAREHOUSE.Contains(queryStr)
								|| a.AUTO_ASSIGN_LPN.Contains(queryStr)
								|| a.AUTO_PUTAWAY.Contains(queryStr)
								|| a.ALLOW_OVER_RECEIVING.Contains(queryStr)
								|| a.ACTIVE.Contains(queryStr)
								|| a.AUTO_LOCATE.Contains(queryStr)
								|| a.AUTO_CHECKIN.Contains(queryStr)
								|| a.SHOW_OPEN_QTY.Contains(queryStr)
								|| a.RECEIPT_TYPES.Contains(queryStr)
								|| a.USER_DEF1.Contains(queryStr)
								|| a.USER_DEF2.Contains(queryStr)
								|| a.USER_DEF3.Contains(queryStr)
								|| a.USER_DEF4.Contains(queryStr)
								|| a.USER_DEF5.Contains(queryStr)
								|| a.USER_DEF6.Contains(queryStr)
								|| a.USER_DEF7.Contains(queryStr)
								|| a.USER_DEF8.Contains(queryStr)
								|| a.GROUP_PUTAWAY.Contains(queryStr)
								|| a.NEST_DURING_CHECKIN.Contains(queryStr)
								|| a.MANUALLY_BUILD_LPN.Contains(queryStr)
								
								|| a.CREATE_USER.Contains(queryStr)
								
								|| a.LAST_MODIFY_USER.Contains(queryStr)
								|| a.RULE_ASSIGNMENT.Contains(queryStr)
								|| a.RECEIPT_BY_PIECE.Contains(queryStr)
								|| a.RECEIPT_AUTOMATIC_CONFIRM.Contains(queryStr)
								);
			}else{
				queryData = m_Rep.GetList(where);
			}
			
		  
			pager.totalRows = queryData.Count();
			//排序
			queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
			return CreateModelList(ref queryData);
		}
		public virtual List<Apps.Models.SCV.RECEIVING.RECEIVING_PREFERENCE_MODEL> CreateModelList(ref IQueryable<Apps.Models.RECEIVING_PREFERENCE> queryData)
		{

			List<Apps.Models.SCV.RECEIVING.RECEIVING_PREFERENCE_MODEL> modelList = (from r in queryData
											  select new Apps.Models.SCV.RECEIVING.RECEIVING_PREFERENCE_MODEL
											  {
													INTERNAL_PREF_NUM = r.INTERNAL_PREF_NUM,
													PREFERENCE_NAME = r.PREFERENCE_NAME,
													WAREHOUSE = r.WAREHOUSE,
													AUTO_ASSIGN_LPN = r.AUTO_ASSIGN_LPN,
													AUTO_PUTAWAY = r.AUTO_PUTAWAY,
													ALLOW_OVER_RECEIVING = r.ALLOW_OVER_RECEIVING,
													ACTIVE = r.ACTIVE,
													AUTO_LOCATE = r.AUTO_LOCATE,
													AUTO_CHECKIN = r.AUTO_CHECKIN,
													SHOW_OPEN_QTY = r.SHOW_OPEN_QTY,
													RECEIPT_TYPES = r.RECEIPT_TYPES,
													USER_DEF1 = r.USER_DEF1,
													USER_DEF2 = r.USER_DEF2,
													USER_DEF3 = r.USER_DEF3,
													USER_DEF4 = r.USER_DEF4,
													USER_DEF5 = r.USER_DEF5,
													USER_DEF6 = r.USER_DEF6,
													USER_DEF7 = r.USER_DEF7,
													USER_DEF8 = r.USER_DEF8,
													GROUP_PUTAWAY = r.GROUP_PUTAWAY,
													NEST_DURING_CHECKIN = r.NEST_DURING_CHECKIN,
													MANUALLY_BUILD_LPN = r.MANUALLY_BUILD_LPN,
													CREATE_DATE_TIME = r.CREATE_DATE_TIME,
													CREATE_USER = r.CREATE_USER,
													LAST_MODIFY_DATE_TIME = r.LAST_MODIFY_DATE_TIME,
													LAST_MODIFY_USER = r.LAST_MODIFY_USER,
													RULE_ASSIGNMENT = r.RULE_ASSIGNMENT,
													RECEIPT_BY_PIECE = r.RECEIPT_BY_PIECE,
													RECEIPT_AUTOMATIC_CONFIRM = r.RECEIPT_AUTOMATIC_CONFIRM,
          
											  }).ToList();

			return modelList;
		}

		public virtual void Create(ref ValidationErrors errors, Apps.Models.SCV.RECEIVING.RECEIVING_PREFERENCE_MODEL model)
		{
				Apps.Models.RECEIVING_PREFERENCE entity = m_Rep.GetById(model.INTERNAL_PREF_NUM);
				if (entity != null)
				{
					errors.Add(Resource.PrimaryRepeat);
					return;
				}
				entity = new Apps.Models.RECEIVING_PREFERENCE();
			   				entity.INTERNAL_PREF_NUM = model.INTERNAL_PREF_NUM;
				entity.PREFERENCE_NAME = model.PREFERENCE_NAME;
				entity.WAREHOUSE = model.WAREHOUSE;
				entity.AUTO_ASSIGN_LPN = model.AUTO_ASSIGN_LPN;
				entity.AUTO_PUTAWAY = model.AUTO_PUTAWAY;
				entity.ALLOW_OVER_RECEIVING = model.ALLOW_OVER_RECEIVING;
				entity.ACTIVE = model.ACTIVE;
				entity.AUTO_LOCATE = model.AUTO_LOCATE;
				entity.AUTO_CHECKIN = model.AUTO_CHECKIN;
				entity.SHOW_OPEN_QTY = model.SHOW_OPEN_QTY;
				entity.RECEIPT_TYPES = model.RECEIPT_TYPES;
				entity.USER_DEF1 = model.USER_DEF1;
				entity.USER_DEF2 = model.USER_DEF2;
				entity.USER_DEF3 = model.USER_DEF3;
				entity.USER_DEF4 = model.USER_DEF4;
				entity.USER_DEF5 = model.USER_DEF5;
				entity.USER_DEF6 = model.USER_DEF6;
				entity.USER_DEF7 = model.USER_DEF7;
				entity.USER_DEF8 = model.USER_DEF8;
				entity.GROUP_PUTAWAY = model.GROUP_PUTAWAY;
				entity.NEST_DURING_CHECKIN = model.NEST_DURING_CHECKIN;
				entity.MANUALLY_BUILD_LPN = model.MANUALLY_BUILD_LPN;
				entity.CREATE_DATE_TIME = model.CREATE_DATE_TIME;
				entity.CREATE_USER = model.CREATE_USER;
				entity.LAST_MODIFY_DATE_TIME = model.LAST_MODIFY_DATE_TIME;
				entity.LAST_MODIFY_USER = model.LAST_MODIFY_USER;
				entity.RULE_ASSIGNMENT = model.RULE_ASSIGNMENT;
				entity.RECEIPT_BY_PIECE = model.RECEIPT_BY_PIECE;
				entity.RECEIPT_AUTOMATIC_CONFIRM = model.RECEIPT_AUTOMATIC_CONFIRM;
  
				m_Rep.Create(entity);
		}



		 public virtual void RemoveById(ref ValidationErrors errors, string id)
		{
			
				m_Rep.RemoveById(id);
			
		}

		public virtual void RemoveByIds(ref ValidationErrors errors, string[] deleteCollection)
		{
				if (deleteCollection != null)
				{
				   //事务批量删除
				   // using (TransactionScope transactionScope = new TransactionScope())
				   // {
				   //     if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
				   //     {
				   //         transactionScope.Complete();
				   //         return true;
				   //     }
				   //    else
				   //     {
				   //         Transaction.Current.Rollback();
				   //         return false;
				   //     }
				   // }
				   m_Rep.RemoveById(deleteCollection);
				}
		}

		
	   

		public virtual void Modify(ref ValidationErrors errors, Apps.Models.SCV.RECEIVING.RECEIVING_PREFERENCE_MODEL model,params string[] updateProperties)
		{
				Apps.Models.RECEIVING_PREFERENCE entity = m_Rep.GetById(model.INTERNAL_PREF_NUM);
				if (entity == null)
				{
					errors.Add(Resource.Disable);
					return;
				}
							  				if (updateProperties.Count() <= 0){
										entity.INTERNAL_PREF_NUM = model.INTERNAL_PREF_NUM;
											entity.PREFERENCE_NAME = model.PREFERENCE_NAME;
											entity.WAREHOUSE = model.WAREHOUSE;
											entity.AUTO_ASSIGN_LPN = model.AUTO_ASSIGN_LPN;
											entity.AUTO_PUTAWAY = model.AUTO_PUTAWAY;
											entity.ALLOW_OVER_RECEIVING = model.ALLOW_OVER_RECEIVING;
											entity.ACTIVE = model.ACTIVE;
											entity.AUTO_LOCATE = model.AUTO_LOCATE;
											entity.AUTO_CHECKIN = model.AUTO_CHECKIN;
											entity.SHOW_OPEN_QTY = model.SHOW_OPEN_QTY;
											entity.RECEIPT_TYPES = model.RECEIPT_TYPES;
											entity.USER_DEF1 = model.USER_DEF1;
											entity.USER_DEF2 = model.USER_DEF2;
											entity.USER_DEF3 = model.USER_DEF3;
											entity.USER_DEF4 = model.USER_DEF4;
											entity.USER_DEF5 = model.USER_DEF5;
											entity.USER_DEF6 = model.USER_DEF6;
											entity.USER_DEF7 = model.USER_DEF7;
											entity.USER_DEF8 = model.USER_DEF8;
											entity.GROUP_PUTAWAY = model.GROUP_PUTAWAY;
											entity.NEST_DURING_CHECKIN = model.NEST_DURING_CHECKIN;
											entity.MANUALLY_BUILD_LPN = model.MANUALLY_BUILD_LPN;
											entity.CREATE_DATE_TIME = model.CREATE_DATE_TIME;
											entity.CREATE_USER = model.CREATE_USER;
											entity.LAST_MODIFY_DATE_TIME = model.LAST_MODIFY_DATE_TIME;
											entity.LAST_MODIFY_USER = model.LAST_MODIFY_USER;
											entity.RULE_ASSIGNMENT = model.RULE_ASSIGNMENT;
											entity.RECEIPT_BY_PIECE = model.RECEIPT_BY_PIECE;
											entity.RECEIPT_AUTOMATIC_CONFIRM = model.RECEIPT_AUTOMATIC_CONFIRM;
									}else{
					
						Type type = typeof(Apps.Models.SCV.RECEIVING.RECEIVING_PREFERENCE_MODEL);
						Type typeE = typeof(Apps.Models.RECEIVING_PREFERENCE);
						foreach (var item in updateProperties) {
						System.Reflection.PropertyInfo pi = type.GetProperty(item);
						System.Reflection.PropertyInfo piE = typeE.GetProperty(item);
						piE.SetValue(entity,pi.GetValue(model),null);
				}
				}
				 

				m_Rep.Modify(entity,updateProperties);
		}

	  

		public virtual Apps.Models.SCV.RECEIVING.RECEIVING_PREFERENCE_MODEL GetById(string id)
		{
			Apps.Models.RECEIVING_PREFERENCE entity = m_Rep.GetById(id);
			if (entity!=null)
			{
				//RECEIVING_PREFERENCE entity = m_Rep.GetById(id);
				Apps.Models.SCV.RECEIVING.RECEIVING_PREFERENCE_MODEL model = new Apps.Models.SCV.RECEIVING.RECEIVING_PREFERENCE_MODEL();
							  				model.INTERNAL_PREF_NUM = entity.INTERNAL_PREF_NUM;
				model.PREFERENCE_NAME = entity.PREFERENCE_NAME;
				model.WAREHOUSE = entity.WAREHOUSE;
				model.AUTO_ASSIGN_LPN = entity.AUTO_ASSIGN_LPN;
				model.AUTO_PUTAWAY = entity.AUTO_PUTAWAY;
				model.ALLOW_OVER_RECEIVING = entity.ALLOW_OVER_RECEIVING;
				model.ACTIVE = entity.ACTIVE;
				model.AUTO_LOCATE = entity.AUTO_LOCATE;
				model.AUTO_CHECKIN = entity.AUTO_CHECKIN;
				model.SHOW_OPEN_QTY = entity.SHOW_OPEN_QTY;
				model.RECEIPT_TYPES = entity.RECEIPT_TYPES;
				model.USER_DEF1 = entity.USER_DEF1;
				model.USER_DEF2 = entity.USER_DEF2;
				model.USER_DEF3 = entity.USER_DEF3;
				model.USER_DEF4 = entity.USER_DEF4;
				model.USER_DEF5 = entity.USER_DEF5;
				model.USER_DEF6 = entity.USER_DEF6;
				model.USER_DEF7 = entity.USER_DEF7;
				model.USER_DEF8 = entity.USER_DEF8;
				model.GROUP_PUTAWAY = entity.GROUP_PUTAWAY;
				model.NEST_DURING_CHECKIN = entity.NEST_DURING_CHECKIN;
				model.MANUALLY_BUILD_LPN = entity.MANUALLY_BUILD_LPN;
				model.CREATE_DATE_TIME = entity.CREATE_DATE_TIME;
				model.CREATE_USER = entity.CREATE_USER;
				model.LAST_MODIFY_DATE_TIME = entity.LAST_MODIFY_DATE_TIME;
				model.LAST_MODIFY_USER = entity.LAST_MODIFY_USER;
				model.RULE_ASSIGNMENT = entity.RULE_ASSIGNMENT;
				model.RECEIPT_BY_PIECE = entity.RECEIPT_BY_PIECE;
				model.RECEIPT_AUTOMATIC_CONFIRM = entity.RECEIPT_AUTOMATIC_CONFIRM;
 
				return model;
			}
			else
			{
				return null;
			}
		}

	 

	}
}
