<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="../../../Apps.Models/Common.ttinclude"#><#@ 
 output extension=".cs"#>
 <#

const string inputFile = @"../../../Apps.Models/SCVDB.edmx";
var textTransform = DynamicTextTransformation.Create(this);
var code = new CodeGenerationTools(this);
var ef = new MetadataTools(this);
var typeMapper = new TypeMapper(code, ef, textTransform.Errors);
var	fileManager = EntityFrameworkTemplateFileManager.Create(this);
var itemCollection = new EdmMetadataLoader(textTransform.Host, textTransform.Errors).CreateEdmItemCollection(inputFile);
var codeStringGenerator = new CodeStringGenerator(code, typeMapper, ef);

if (!typeMapper.VerifyCaseInsensitiveTypeUniqueness(typeMapper.GetAllGlobalItems(itemCollection), inputFile))
{
	return string.Empty;
}

WriteHeader(codeStringGenerator, fileManager);

foreach (var entity in typeMapper.GetItemsToGenerate<EntityType>(itemCollection))
{
	if(!entity.Name.StartsWith("V_"))
		{
			fileManager.StartNewFile("Virtual_"+entity.Name + "_SERVICE.cs");
			var simpleProperties = typeMapper.GetSimpleProperties(entity);
#>
using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Microsoft.Practices.Unity;
using System.Transactions;
using Apps.Locale;
using System.Linq.Expressions;
namespace Apps.Service.SCV.<#=entity.Name.IndexOf("_")>0?entity.Name.Substring(0,entity.Name.IndexOf("_")):"Sys" #>
{
	public class Virtual_<#=entity.Name #>_SERVICE
	{

		public Apps.IRepository.SCV.ISCVDBSession SCVDBSession{
			 get
			{
				return Service.SCV.SCVDBSessionFactory.GetDBSession();
			}
		}
	   
		public Apps.IRepository.SCV.<#=entity.Name.IndexOf("_")>0?entity.Name.Substring(0,entity.Name.IndexOf("_")):"Sys" #>.I<#=entity.Name #>_REPOSITORY m_Rep{
			 get
			{
				return SCVDBSession.<#=entity.Name #>;
			}
		}
		

		public virtual List<Apps.Models.SCV.<#=entity.Name.IndexOf("_")>0?entity.Name.Substring(0,entity.Name.IndexOf("_")):"Sys" #>.<#=entity.Name #>_MODEL> GetList(Expression<Func<Apps.Models.<#=entity.Name#>, bool>> where = null){
		
				IQueryable<Apps.Models.<#=entity.Name #>> queryData = m_Rep.GetList(where);
				return CreateModelList(ref queryData);
		}

		public virtual List<Apps.Models.SCV.<#=entity.Name.IndexOf("_")>0?entity.Name.Substring(0,entity.Name.IndexOf("_")):"Sys" #>.<#=entity.Name #>_MODEL> GetListSort<TKey>(Expression<Func<Apps.Models.<#=entity.Name#>, bool>> where,Expression<Func<Apps.Models.<#=entity.Name#>, TKey>>orderBy, bool isAsc = true){
		
				IQueryable<Apps.Models.<#=entity.Name #>> queryData = m_Rep.GetListSort(where, orderBy, isAsc);
				return CreateModelList(ref queryData);
		}

		public virtual List<Apps.Models.SCV.<#=entity.Name.IndexOf("_")>0?entity.Name.Substring(0,entity.Name.IndexOf("_")):"Sys" #>.<#=entity.Name #>_MODEL> GetList(ref GridPager pager, string queryStr,Expression<Func<Apps.Models.<#=entity.Name#>, bool>> where = null)
		{

			IQueryable<Apps.Models.<#=entity.Name #>> queryData;
			
			if (!string.IsNullOrWhiteSpace(queryStr))
			{
				queryData = m_Rep.GetList(where
				<#
				int i =0;
				if (simpleProperties.Any()){foreach(var edmProperty in simpleProperties){ 
				if(i==0)
				{

				#>
				<#=codeStringGenerator.Property(edmProperty).ToString().IndexOf("string")>0?",a=>a."+edmProperty+".Contains(queryStr)":""#>
				<#
				if(codeStringGenerator.Property(edmProperty).ToString().IndexOf("string")>0)
				{
				i=1;
				}
				}
				else if(i==1)
				{#>
				<#=codeStringGenerator.Property(edmProperty).ToString().IndexOf("string")>0?"|| a."+edmProperty+".Contains(queryStr)":""#>
				<#
				}
				
				#>
<#}

}#>
				);
			}else{
				queryData = m_Rep.GetList(where);
			}
			
		  
			pager.totalRows = queryData.Count();
			//排序
			queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
			return CreateModelList(ref queryData);
		}
		public virtual List<Apps.Models.SCV.<#=entity.Name.IndexOf("_")>0?entity.Name.Substring(0,entity.Name.IndexOf("_")):"Sys" #>.<#=entity.Name #>_MODEL> CreateModelList(ref IQueryable<Apps.Models.<#=entity.Name #>> queryData)
		{

			List<Apps.Models.SCV.<#=entity.Name.IndexOf("_")>0?entity.Name.Substring(0,entity.Name.IndexOf("_")):"Sys" #>.<#=entity.Name #>_MODEL> modelList = (from r in queryData
											  select new Apps.Models.SCV.<#=entity.Name.IndexOf("_")>0?entity.Name.Substring(0,entity.Name.IndexOf("_")):"Sys" #>.<#=entity.Name #>_MODEL
											  {
<#
if (simpleProperties.Any())
{
foreach(var edmProperty in simpleProperties)
{
#>
													<#=edmProperty#> = r.<#=edmProperty#>,
<#
}
}
#>          
											  }).ToList();

			return modelList;
		}

		public virtual void Create(ref ValidationErrors errors, Apps.Models.SCV.<#=entity.Name.IndexOf("_")>0?entity.Name.Substring(0,entity.Name.IndexOf("_")):"Sys" #>.<#=entity.Name #>_MODEL model)
		{
				Apps.Models.<#=entity.Name #> entity = m_Rep.GetById(model.<#int j =0;if (simpleProperties.Any()){foreach(var edmProperty in simpleProperties){if(j==0){#><#=edmProperty#><#j=1;}}}#>);
				if (entity != null)
				{
					errors.Add(Resource.PrimaryRepeat);
					return;
				}
				entity = new Apps.Models.<#=entity.Name #>();
			   <#

if (simpleProperties.Any())
{
foreach(var edmProperty in simpleProperties)
{
#>
				entity.<#=edmProperty#> = model.<#=edmProperty#>;
<#
}
}
#>  
				m_Rep.Create(entity);
		}



		 public virtual void RemoveById(ref ValidationErrors errors, string id)
		{
			
				m_Rep.RemoveById(id);
			
		}

		public virtual void RemoveByIds(ref ValidationErrors errors, string[] deleteCollection)
		{
				if (deleteCollection != null)
				{
				   //事务批量删除
				   // using (TransactionScope transactionScope = new TransactionScope())
				   // {
				   //     if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
				   //     {
				   //         transactionScope.Complete();
				   //         return true;
				   //     }
				   //    else
				   //     {
				   //         Transaction.Current.Rollback();
				   //         return false;
				   //     }
				   // }
				   m_Rep.RemoveById(deleteCollection);
				}
		}

		
	   

		public virtual void Modify(ref ValidationErrors errors, Apps.Models.SCV.<#=entity.Name.IndexOf("_")>0?entity.Name.Substring(0,entity.Name.IndexOf("_")):"Sys" #>.<#=entity.Name #>_MODEL model,params string[] updateProperties)
		{
				Apps.Models.<#=entity.Name #> entity = m_Rep.GetById(model.<#int n =0;if (simpleProperties.Any()){foreach(var edmProperty in simpleProperties){if(n==0){#><#=edmProperty#><#n=1;}}}#>);
				if (entity == null)
				{
					errors.Add(Resource.Disable);
					return;
				}
							  <#											  
			if (simpleProperties.Any())
			{
				#>
				if (updateProperties.Count() <= 0){
				<#			
					foreach(var edmProperty in simpleProperties)
					{
					#>
						entity.<#=edmProperty#> = model.<#=edmProperty#>;
					<#
					}
					#>
				}else{
					
						Type type = typeof(Apps.Models.SCV.<#=entity.Name.IndexOf("_")>0?entity.Name.Substring(0,entity.Name.IndexOf("_")):"Sys" #>.<#=entity.Name #>_MODEL);
						Type typeE = typeof(Apps.Models.<#=entity.Name #>);
						foreach (var item in updateProperties) {
						System.Reflection.PropertyInfo pi = type.GetProperty(item);
						System.Reflection.PropertyInfo piE = typeE.GetProperty(item);
						piE.SetValue(entity,pi.GetValue(model),null);
				}
				}
				<#
				}
				#> 

				m_Rep.Modify(entity,updateProperties);
		}

	  

		public virtual Apps.Models.SCV.<#=entity.Name.IndexOf("_")>0?entity.Name.Substring(0,entity.Name.IndexOf("_")):"Sys" #>.<#=entity.Name #>_MODEL GetById(string id)
		{
			Apps.Models.<#=entity.Name #> entity = m_Rep.GetById(id);
			if (entity!=null)
			{
				//<#=entity.Name #> entity = m_Rep.GetById(id);
				Apps.Models.SCV.<#=entity.Name.IndexOf("_")>0?entity.Name.Substring(0,entity.Name.IndexOf("_")):"Sys" #>.<#=entity.Name #>_MODEL model = new Apps.Models.SCV.<#=entity.Name.IndexOf("_")>0?entity.Name.Substring(0,entity.Name.IndexOf("_")):"Sys" #>.<#=entity.Name #>_MODEL();
							  <#
if (simpleProperties.Any())
{
foreach(var edmProperty in simpleProperties)
{
#>
				model.<#=edmProperty#> = entity.<#=edmProperty#>;
<#
}
}
#> 
				return model;
			}
			else
			{
				return null;
			}
		}

	 

	}
<#
			EndNamespace(code);
		}
}

fileManager.Process();

#>
