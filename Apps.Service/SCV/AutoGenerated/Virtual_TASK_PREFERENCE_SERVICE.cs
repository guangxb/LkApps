//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Microsoft.Practices.Unity;
using System.Transactions;
using Apps.Locale;
using System.Linq.Expressions;
namespace Apps.Service.SCV.TASK
{
	public class Virtual_TASK_PREFERENCE_SERVICE
	{

		public Apps.IRepository.SCV.ISCVDBSession SCVDBSession{
			 get
			{
				return Service.SCV.SCVDBSessionFactory.GetDBSession();
			}
		}
	   
		public Apps.IRepository.SCV.TASK.ITASK_PREFERENCE_REPOSITORY m_Rep{
			 get
			{
				return SCVDBSession.TASK_PREFERENCE;
			}
		}
		

		public virtual List<Apps.Models.SCV.TASK.TASK_PREFERENCE_MODEL> GetList(Expression<Func<Apps.Models.TASK_PREFERENCE, bool>> where = null){
		
				IQueryable<Apps.Models.TASK_PREFERENCE> queryData = m_Rep.GetList(where);
				return CreateModelList(ref queryData);
		}

		public virtual List<Apps.Models.SCV.TASK.TASK_PREFERENCE_MODEL> GetListSort<TKey>(Expression<Func<Apps.Models.TASK_PREFERENCE, bool>> where,Expression<Func<Apps.Models.TASK_PREFERENCE, TKey>>orderBy, bool isAsc = true){
		
				IQueryable<Apps.Models.TASK_PREFERENCE> queryData = m_Rep.GetListSort(where, orderBy, isAsc);
				return CreateModelList(ref queryData);
		}

		public virtual List<Apps.Models.SCV.TASK.TASK_PREFERENCE_MODEL> GetList(ref GridPager pager, string queryStr,Expression<Func<Apps.Models.TASK_PREFERENCE, bool>> where = null)
		{

			IQueryable<Apps.Models.TASK_PREFERENCE> queryData;
			
			if (!string.IsNullOrWhiteSpace(queryStr))
			{
				queryData = m_Rep.GetList(where
								
								,a=>a.PREFERENCE_NAME.Contains(queryStr)
								|| a.TASK_TYPES.Contains(queryStr)
								|| a.ZONES.Contains(queryStr)
								|| a.TASK_INIT_METHOD.Contains(queryStr)
								|| a.FROM_ASSIGN_METHOD.Contains(queryStr)
								|| a.TO_ASSIGN_METHOD.Contains(queryStr)
								|| a.PICK_METHOD.Contains(queryStr)
								|| a.RF_SUCCESS_ENABLED.Contains(queryStr)
								|| a.RF_SUCCESS_FIELD.Contains(queryStr)
								|| a.RF_SUCCESS_MESSAGE.Contains(queryStr)
								|| a.PUT_METHOD.Contains(queryStr)
								|| a.DEFAULT_LP_AS_SHIP_CONT.Contains(queryStr)
								|| a.USER_DEF1.Contains(queryStr)
								|| a.USER_DEF2.Contains(queryStr)
								|| a.USER_DEF3.Contains(queryStr)
								|| a.USER_DEF4.Contains(queryStr)
								|| a.USER_DEF5.Contains(queryStr)
								|| a.USER_DEF6.Contains(queryStr)
								
								
								|| a.USER_STAMP.Contains(queryStr)
								
								|| a.MULTI_PICK_METHOD.Contains(queryStr)
								|| a.VERIFY_CART_POS.Contains(queryStr)
								|| a.TASK_INIT_BY.Contains(queryStr)
								|| a.ALLOW_PARTIAL.Contains(queryStr)
								|| a.PICK_DROP_LOC.Contains(queryStr)
								|| a.TASK_METHOD.Contains(queryStr)
								|| a.DISPLAY_ITEM_INFO.Contains(queryStr)
								);
			}else{
				queryData = m_Rep.GetList(where);
			}
			
		  
			pager.totalRows = queryData.Count();
			//排序
			queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
			return CreateModelList(ref queryData);
		}
		public virtual List<Apps.Models.SCV.TASK.TASK_PREFERENCE_MODEL> CreateModelList(ref IQueryable<Apps.Models.TASK_PREFERENCE> queryData)
		{

			List<Apps.Models.SCV.TASK.TASK_PREFERENCE_MODEL> modelList = (from r in queryData
											  select new Apps.Models.SCV.TASK.TASK_PREFERENCE_MODEL
											  {
													INTERNAL_PREF_NUM = r.INTERNAL_PREF_NUM,
													PREFERENCE_NAME = r.PREFERENCE_NAME,
													TASK_TYPES = r.TASK_TYPES,
													ZONES = r.ZONES,
													TASK_INIT_METHOD = r.TASK_INIT_METHOD,
													FROM_ASSIGN_METHOD = r.FROM_ASSIGN_METHOD,
													TO_ASSIGN_METHOD = r.TO_ASSIGN_METHOD,
													PICK_METHOD = r.PICK_METHOD,
													RF_SUCCESS_ENABLED = r.RF_SUCCESS_ENABLED,
													RF_SUCCESS_FIELD = r.RF_SUCCESS_FIELD,
													RF_SUCCESS_MESSAGE = r.RF_SUCCESS_MESSAGE,
													PUT_METHOD = r.PUT_METHOD,
													DEFAULT_LP_AS_SHIP_CONT = r.DEFAULT_LP_AS_SHIP_CONT,
													USER_DEF1 = r.USER_DEF1,
													USER_DEF2 = r.USER_DEF2,
													USER_DEF3 = r.USER_DEF3,
													USER_DEF4 = r.USER_DEF4,
													USER_DEF5 = r.USER_DEF5,
													USER_DEF6 = r.USER_DEF6,
													USER_DEF7 = r.USER_DEF7,
													USER_DEF8 = r.USER_DEF8,
													USER_STAMP = r.USER_STAMP,
													DATE_TIME_STAMP = r.DATE_TIME_STAMP,
													MULTI_PICK_METHOD = r.MULTI_PICK_METHOD,
													VERIFY_CART_POS = r.VERIFY_CART_POS,
													TASK_INIT_BY = r.TASK_INIT_BY,
													ALLOW_PARTIAL = r.ALLOW_PARTIAL,
													PICK_DROP_LOC = r.PICK_DROP_LOC,
													TASK_METHOD = r.TASK_METHOD,
													DISPLAY_ITEM_INFO = r.DISPLAY_ITEM_INFO,
          
											  }).ToList();

			return modelList;
		}

		public virtual void Create(ref ValidationErrors errors, Apps.Models.SCV.TASK.TASK_PREFERENCE_MODEL model)
		{
				Apps.Models.TASK_PREFERENCE entity = m_Rep.GetById(model.INTERNAL_PREF_NUM);
				if (entity != null)
				{
					errors.Add(Resource.PrimaryRepeat);
					return;
				}
				entity = new Apps.Models.TASK_PREFERENCE();
			   				entity.INTERNAL_PREF_NUM = model.INTERNAL_PREF_NUM;
				entity.PREFERENCE_NAME = model.PREFERENCE_NAME;
				entity.TASK_TYPES = model.TASK_TYPES;
				entity.ZONES = model.ZONES;
				entity.TASK_INIT_METHOD = model.TASK_INIT_METHOD;
				entity.FROM_ASSIGN_METHOD = model.FROM_ASSIGN_METHOD;
				entity.TO_ASSIGN_METHOD = model.TO_ASSIGN_METHOD;
				entity.PICK_METHOD = model.PICK_METHOD;
				entity.RF_SUCCESS_ENABLED = model.RF_SUCCESS_ENABLED;
				entity.RF_SUCCESS_FIELD = model.RF_SUCCESS_FIELD;
				entity.RF_SUCCESS_MESSAGE = model.RF_SUCCESS_MESSAGE;
				entity.PUT_METHOD = model.PUT_METHOD;
				entity.DEFAULT_LP_AS_SHIP_CONT = model.DEFAULT_LP_AS_SHIP_CONT;
				entity.USER_DEF1 = model.USER_DEF1;
				entity.USER_DEF2 = model.USER_DEF2;
				entity.USER_DEF3 = model.USER_DEF3;
				entity.USER_DEF4 = model.USER_DEF4;
				entity.USER_DEF5 = model.USER_DEF5;
				entity.USER_DEF6 = model.USER_DEF6;
				entity.USER_DEF7 = model.USER_DEF7;
				entity.USER_DEF8 = model.USER_DEF8;
				entity.USER_STAMP = model.USER_STAMP;
				entity.DATE_TIME_STAMP = model.DATE_TIME_STAMP;
				entity.MULTI_PICK_METHOD = model.MULTI_PICK_METHOD;
				entity.VERIFY_CART_POS = model.VERIFY_CART_POS;
				entity.TASK_INIT_BY = model.TASK_INIT_BY;
				entity.ALLOW_PARTIAL = model.ALLOW_PARTIAL;
				entity.PICK_DROP_LOC = model.PICK_DROP_LOC;
				entity.TASK_METHOD = model.TASK_METHOD;
				entity.DISPLAY_ITEM_INFO = model.DISPLAY_ITEM_INFO;
  
				m_Rep.Create(entity);
		}



		 public virtual void RemoveById(ref ValidationErrors errors, string id)
		{
			
				m_Rep.RemoveById(id);
			
		}

		public virtual void RemoveByIds(ref ValidationErrors errors, string[] deleteCollection)
		{
				if (deleteCollection != null)
				{
				   //事务批量删除
				   // using (TransactionScope transactionScope = new TransactionScope())
				   // {
				   //     if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
				   //     {
				   //         transactionScope.Complete();
				   //         return true;
				   //     }
				   //    else
				   //     {
				   //         Transaction.Current.Rollback();
				   //         return false;
				   //     }
				   // }
				   m_Rep.RemoveById(deleteCollection);
				}
		}

		
	   

		public virtual void Modify(ref ValidationErrors errors, Apps.Models.SCV.TASK.TASK_PREFERENCE_MODEL model,params string[] updateProperties)
		{
				Apps.Models.TASK_PREFERENCE entity = m_Rep.GetById(model.INTERNAL_PREF_NUM);
				if (entity == null)
				{
					errors.Add(Resource.Disable);
					return;
				}
							  				if (updateProperties.Count() <= 0){
										entity.INTERNAL_PREF_NUM = model.INTERNAL_PREF_NUM;
											entity.PREFERENCE_NAME = model.PREFERENCE_NAME;
											entity.TASK_TYPES = model.TASK_TYPES;
											entity.ZONES = model.ZONES;
											entity.TASK_INIT_METHOD = model.TASK_INIT_METHOD;
											entity.FROM_ASSIGN_METHOD = model.FROM_ASSIGN_METHOD;
											entity.TO_ASSIGN_METHOD = model.TO_ASSIGN_METHOD;
											entity.PICK_METHOD = model.PICK_METHOD;
											entity.RF_SUCCESS_ENABLED = model.RF_SUCCESS_ENABLED;
											entity.RF_SUCCESS_FIELD = model.RF_SUCCESS_FIELD;
											entity.RF_SUCCESS_MESSAGE = model.RF_SUCCESS_MESSAGE;
											entity.PUT_METHOD = model.PUT_METHOD;
											entity.DEFAULT_LP_AS_SHIP_CONT = model.DEFAULT_LP_AS_SHIP_CONT;
											entity.USER_DEF1 = model.USER_DEF1;
											entity.USER_DEF2 = model.USER_DEF2;
											entity.USER_DEF3 = model.USER_DEF3;
											entity.USER_DEF4 = model.USER_DEF4;
											entity.USER_DEF5 = model.USER_DEF5;
											entity.USER_DEF6 = model.USER_DEF6;
											entity.USER_DEF7 = model.USER_DEF7;
											entity.USER_DEF8 = model.USER_DEF8;
											entity.USER_STAMP = model.USER_STAMP;
											entity.DATE_TIME_STAMP = model.DATE_TIME_STAMP;
											entity.MULTI_PICK_METHOD = model.MULTI_PICK_METHOD;
											entity.VERIFY_CART_POS = model.VERIFY_CART_POS;
											entity.TASK_INIT_BY = model.TASK_INIT_BY;
											entity.ALLOW_PARTIAL = model.ALLOW_PARTIAL;
											entity.PICK_DROP_LOC = model.PICK_DROP_LOC;
											entity.TASK_METHOD = model.TASK_METHOD;
											entity.DISPLAY_ITEM_INFO = model.DISPLAY_ITEM_INFO;
									}else{
					
						Type type = typeof(Apps.Models.SCV.TASK.TASK_PREFERENCE_MODEL);
						Type typeE = typeof(Apps.Models.TASK_PREFERENCE);
						foreach (var item in updateProperties) {
						System.Reflection.PropertyInfo pi = type.GetProperty(item);
						System.Reflection.PropertyInfo piE = typeE.GetProperty(item);
						piE.SetValue(entity,pi.GetValue(model),null);
				}
				}
				 

				m_Rep.Modify(entity,updateProperties);
		}

	  

		public virtual Apps.Models.SCV.TASK.TASK_PREFERENCE_MODEL GetById(string id)
		{
			Apps.Models.TASK_PREFERENCE entity = m_Rep.GetById(id);
			if (entity!=null)
			{
				//TASK_PREFERENCE entity = m_Rep.GetById(id);
				Apps.Models.SCV.TASK.TASK_PREFERENCE_MODEL model = new Apps.Models.SCV.TASK.TASK_PREFERENCE_MODEL();
							  				model.INTERNAL_PREF_NUM = entity.INTERNAL_PREF_NUM;
				model.PREFERENCE_NAME = entity.PREFERENCE_NAME;
				model.TASK_TYPES = entity.TASK_TYPES;
				model.ZONES = entity.ZONES;
				model.TASK_INIT_METHOD = entity.TASK_INIT_METHOD;
				model.FROM_ASSIGN_METHOD = entity.FROM_ASSIGN_METHOD;
				model.TO_ASSIGN_METHOD = entity.TO_ASSIGN_METHOD;
				model.PICK_METHOD = entity.PICK_METHOD;
				model.RF_SUCCESS_ENABLED = entity.RF_SUCCESS_ENABLED;
				model.RF_SUCCESS_FIELD = entity.RF_SUCCESS_FIELD;
				model.RF_SUCCESS_MESSAGE = entity.RF_SUCCESS_MESSAGE;
				model.PUT_METHOD = entity.PUT_METHOD;
				model.DEFAULT_LP_AS_SHIP_CONT = entity.DEFAULT_LP_AS_SHIP_CONT;
				model.USER_DEF1 = entity.USER_DEF1;
				model.USER_DEF2 = entity.USER_DEF2;
				model.USER_DEF3 = entity.USER_DEF3;
				model.USER_DEF4 = entity.USER_DEF4;
				model.USER_DEF5 = entity.USER_DEF5;
				model.USER_DEF6 = entity.USER_DEF6;
				model.USER_DEF7 = entity.USER_DEF7;
				model.USER_DEF8 = entity.USER_DEF8;
				model.USER_STAMP = entity.USER_STAMP;
				model.DATE_TIME_STAMP = entity.DATE_TIME_STAMP;
				model.MULTI_PICK_METHOD = entity.MULTI_PICK_METHOD;
				model.VERIFY_CART_POS = entity.VERIFY_CART_POS;
				model.TASK_INIT_BY = entity.TASK_INIT_BY;
				model.ALLOW_PARTIAL = entity.ALLOW_PARTIAL;
				model.PICK_DROP_LOC = entity.PICK_DROP_LOC;
				model.TASK_METHOD = entity.TASK_METHOD;
				model.DISPLAY_ITEM_INFO = entity.DISPLAY_ITEM_INFO;
 
				return model;
			}
			else
			{
				return null;
			}
		}

	 

	}
}
