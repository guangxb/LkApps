//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Microsoft.Practices.Unity;
using System.Transactions;
using Apps.Locale;
using System.Linq.Expressions;
namespace Apps.Service.SCV.test
{
	public class Virtual_test_LOC_V_SERVICE
	{

		public Apps.IRepository.SCV.ISCVDBSession SCVDBSession{
			 get
			{
				return Service.SCV.SCVDBSessionFactory.GetDBSession();
			}
		}
	   
		public Apps.IRepository.SCV.test.Itest_LOC_V_REPOSITORY m_Rep{
			 get
			{
				return SCVDBSession.test_LOC_V;
			}
		}
		

		public virtual List<Apps.Models.SCV.test.test_LOC_V_MODEL> GetList(Expression<Func<Apps.Models.test_LOC_V, bool>> where = null){
		
				IQueryable<Apps.Models.test_LOC_V> queryData = m_Rep.GetList(where);
				return CreateModelList(ref queryData);
		}

		public virtual List<Apps.Models.SCV.test.test_LOC_V_MODEL> GetListSort<TKey>(Expression<Func<Apps.Models.test_LOC_V, bool>> where,Expression<Func<Apps.Models.test_LOC_V, TKey>>orderBy, bool isAsc = true){
		
				IQueryable<Apps.Models.test_LOC_V> queryData = m_Rep.GetListSort(where, orderBy, isAsc);
				return CreateModelList(ref queryData);
		}

		public virtual List<Apps.Models.SCV.test.test_LOC_V_MODEL> GetList(ref GridPager pager, string queryStr,Expression<Func<Apps.Models.test_LOC_V, bool>> where = null)
		{

			IQueryable<Apps.Models.test_LOC_V> queryData;
			
			if (!string.IsNullOrWhiteSpace(queryStr))
			{
				queryData = m_Rep.GetList(where
								
								,a=>a.WAREHOUSE.Contains(queryStr)
								|| a.LOCATION.Contains(queryStr)
								|| a.ITEM.Contains(queryStr)
								|| a.ITEM_DESC.Contains(queryStr)
								|| a.COMPANY.Contains(queryStr)
								|| a.PERMANENT.Contains(queryStr)
								
								
								
								
								|| a.QUANTITY_UM.Contains(queryStr)
								|| a.INVENTORY_STS.Contains(queryStr)
								
								|| a.USER_STAMP.Contains(queryStr)
								
								|| a.LPN.Contains(queryStr)
								|| a.PARENT_LPN.Contains(queryStr)
								|| a.ATTRIBUTE1.Contains(queryStr)
								|| a.ATTRIBUTE2.Contains(queryStr)
								|| a.ATTRIBUTE3.Contains(queryStr)
								|| a.ATTRIBUTE4.Contains(queryStr)
								|| a.ATTRIBUTE5.Contains(queryStr)
								|| a.ATTRIBUTE6.Contains(queryStr)
								|| a.ATTRIBUTE7.Contains(queryStr)
								|| a.ATTRIBUTE8.Contains(queryStr)
								|| a.USER_DEF1.Contains(queryStr)
								|| a.USER_DEF2.Contains(queryStr)
								|| a.USER_DEF3.Contains(queryStr)
								|| a.USER_DEF4.Contains(queryStr)
								|| a.USER_DEF5.Contains(queryStr)
								|| a.USER_DEF6.Contains(queryStr)
								|| a.USER_DEF7.Contains(queryStr)
								|| a.USER_DEF8.Contains(queryStr)
								);
			}else{
				queryData = m_Rep.GetList(where);
			}
			
		  
			pager.totalRows = queryData.Count();
			//排序
			queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
			return CreateModelList(ref queryData);
		}
		public virtual List<Apps.Models.SCV.test.test_LOC_V_MODEL> CreateModelList(ref IQueryable<Apps.Models.test_LOC_V> queryData)
		{

			List<Apps.Models.SCV.test.test_LOC_V_MODEL> modelList = (from r in queryData
											  select new Apps.Models.SCV.test.test_LOC_V_MODEL
											  {
													INTERNAL_LOCATION_INV = r.INTERNAL_LOCATION_INV,
													WAREHOUSE = r.WAREHOUSE,
													LOCATION = r.LOCATION,
													ITEM = r.ITEM,
													ITEM_DESC = r.ITEM_DESC,
													COMPANY = r.COMPANY,
													PERMANENT = r.PERMANENT,
													ATTRIBUTE_NUM = r.ATTRIBUTE_NUM,
													ON_HAND_QTY = r.ON_HAND_QTY,
													IN_TRANSIT_QTY = r.IN_TRANSIT_QTY,
													ALLOCATED_QTY = r.ALLOCATED_QTY,
													QUANTITY_UM = r.QUANTITY_UM,
													INVENTORY_STS = r.INVENTORY_STS,
													AGING_DATE = r.AGING_DATE,
													USER_STAMP = r.USER_STAMP,
													DATE_TIME_STAMP = r.DATE_TIME_STAMP,
													LPN = r.LPN,
													PARENT_LPN = r.PARENT_LPN,
													ATTRIBUTE1 = r.ATTRIBUTE1,
													ATTRIBUTE2 = r.ATTRIBUTE2,
													ATTRIBUTE3 = r.ATTRIBUTE3,
													ATTRIBUTE4 = r.ATTRIBUTE4,
													ATTRIBUTE5 = r.ATTRIBUTE5,
													ATTRIBUTE6 = r.ATTRIBUTE6,
													ATTRIBUTE7 = r.ATTRIBUTE7,
													ATTRIBUTE8 = r.ATTRIBUTE8,
													USER_DEF1 = r.USER_DEF1,
													USER_DEF2 = r.USER_DEF2,
													USER_DEF3 = r.USER_DEF3,
													USER_DEF4 = r.USER_DEF4,
													USER_DEF5 = r.USER_DEF5,
													USER_DEF6 = r.USER_DEF6,
													USER_DEF7 = r.USER_DEF7,
													USER_DEF8 = r.USER_DEF8,
          
											  }).ToList();

			return modelList;
		}

		public virtual void Create(ref ValidationErrors errors, Apps.Models.SCV.test.test_LOC_V_MODEL model)
		{
				Apps.Models.test_LOC_V entity = m_Rep.GetById(model.INTERNAL_LOCATION_INV);
				if (entity != null)
				{
					errors.Add(Resource.PrimaryRepeat);
					return;
				}
				entity = new Apps.Models.test_LOC_V();
			   				entity.INTERNAL_LOCATION_INV = model.INTERNAL_LOCATION_INV;
				entity.WAREHOUSE = model.WAREHOUSE;
				entity.LOCATION = model.LOCATION;
				entity.ITEM = model.ITEM;
				entity.ITEM_DESC = model.ITEM_DESC;
				entity.COMPANY = model.COMPANY;
				entity.PERMANENT = model.PERMANENT;
				entity.ATTRIBUTE_NUM = model.ATTRIBUTE_NUM;
				entity.ON_HAND_QTY = model.ON_HAND_QTY;
				entity.IN_TRANSIT_QTY = model.IN_TRANSIT_QTY;
				entity.ALLOCATED_QTY = model.ALLOCATED_QTY;
				entity.QUANTITY_UM = model.QUANTITY_UM;
				entity.INVENTORY_STS = model.INVENTORY_STS;
				entity.AGING_DATE = model.AGING_DATE;
				entity.USER_STAMP = model.USER_STAMP;
				entity.DATE_TIME_STAMP = model.DATE_TIME_STAMP;
				entity.LPN = model.LPN;
				entity.PARENT_LPN = model.PARENT_LPN;
				entity.ATTRIBUTE1 = model.ATTRIBUTE1;
				entity.ATTRIBUTE2 = model.ATTRIBUTE2;
				entity.ATTRIBUTE3 = model.ATTRIBUTE3;
				entity.ATTRIBUTE4 = model.ATTRIBUTE4;
				entity.ATTRIBUTE5 = model.ATTRIBUTE5;
				entity.ATTRIBUTE6 = model.ATTRIBUTE6;
				entity.ATTRIBUTE7 = model.ATTRIBUTE7;
				entity.ATTRIBUTE8 = model.ATTRIBUTE8;
				entity.USER_DEF1 = model.USER_DEF1;
				entity.USER_DEF2 = model.USER_DEF2;
				entity.USER_DEF3 = model.USER_DEF3;
				entity.USER_DEF4 = model.USER_DEF4;
				entity.USER_DEF5 = model.USER_DEF5;
				entity.USER_DEF6 = model.USER_DEF6;
				entity.USER_DEF7 = model.USER_DEF7;
				entity.USER_DEF8 = model.USER_DEF8;
  
				m_Rep.Create(entity);
		}



		 public virtual void RemoveById(ref ValidationErrors errors, string id)
		{
			
				m_Rep.RemoveById(id);
			
		}

		public virtual void RemoveByIds(ref ValidationErrors errors, string[] deleteCollection)
		{
				if (deleteCollection != null)
				{
				   //事务批量删除
				   // using (TransactionScope transactionScope = new TransactionScope())
				   // {
				   //     if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
				   //     {
				   //         transactionScope.Complete();
				   //         return true;
				   //     }
				   //    else
				   //     {
				   //         Transaction.Current.Rollback();
				   //         return false;
				   //     }
				   // }
				   m_Rep.RemoveById(deleteCollection);
				}
		}

		
	   

		public virtual void Modify(ref ValidationErrors errors, Apps.Models.SCV.test.test_LOC_V_MODEL model,params string[] updateProperties)
		{
				Apps.Models.test_LOC_V entity = m_Rep.GetById(model.INTERNAL_LOCATION_INV);
				if (entity == null)
				{
					errors.Add(Resource.Disable);
					return;
				}
							  				if (updateProperties.Count() <= 0){
										entity.INTERNAL_LOCATION_INV = model.INTERNAL_LOCATION_INV;
											entity.WAREHOUSE = model.WAREHOUSE;
											entity.LOCATION = model.LOCATION;
											entity.ITEM = model.ITEM;
											entity.ITEM_DESC = model.ITEM_DESC;
											entity.COMPANY = model.COMPANY;
											entity.PERMANENT = model.PERMANENT;
											entity.ATTRIBUTE_NUM = model.ATTRIBUTE_NUM;
											entity.ON_HAND_QTY = model.ON_HAND_QTY;
											entity.IN_TRANSIT_QTY = model.IN_TRANSIT_QTY;
											entity.ALLOCATED_QTY = model.ALLOCATED_QTY;
											entity.QUANTITY_UM = model.QUANTITY_UM;
											entity.INVENTORY_STS = model.INVENTORY_STS;
											entity.AGING_DATE = model.AGING_DATE;
											entity.USER_STAMP = model.USER_STAMP;
											entity.DATE_TIME_STAMP = model.DATE_TIME_STAMP;
											entity.LPN = model.LPN;
											entity.PARENT_LPN = model.PARENT_LPN;
											entity.ATTRIBUTE1 = model.ATTRIBUTE1;
											entity.ATTRIBUTE2 = model.ATTRIBUTE2;
											entity.ATTRIBUTE3 = model.ATTRIBUTE3;
											entity.ATTRIBUTE4 = model.ATTRIBUTE4;
											entity.ATTRIBUTE5 = model.ATTRIBUTE5;
											entity.ATTRIBUTE6 = model.ATTRIBUTE6;
											entity.ATTRIBUTE7 = model.ATTRIBUTE7;
											entity.ATTRIBUTE8 = model.ATTRIBUTE8;
											entity.USER_DEF1 = model.USER_DEF1;
											entity.USER_DEF2 = model.USER_DEF2;
											entity.USER_DEF3 = model.USER_DEF3;
											entity.USER_DEF4 = model.USER_DEF4;
											entity.USER_DEF5 = model.USER_DEF5;
											entity.USER_DEF6 = model.USER_DEF6;
											entity.USER_DEF7 = model.USER_DEF7;
											entity.USER_DEF8 = model.USER_DEF8;
									}else{
					
						Type type = typeof(Apps.Models.SCV.test.test_LOC_V_MODEL);
						Type typeE = typeof(Apps.Models.test_LOC_V);
						foreach (var item in updateProperties) {
						System.Reflection.PropertyInfo pi = type.GetProperty(item);
						System.Reflection.PropertyInfo piE = typeE.GetProperty(item);
						piE.SetValue(entity,pi.GetValue(model),null);
				}
				}
				 

				m_Rep.Modify(entity,updateProperties);
		}

	  

		public virtual Apps.Models.SCV.test.test_LOC_V_MODEL GetById(string id)
		{
			Apps.Models.test_LOC_V entity = m_Rep.GetById(id);
			if (entity!=null)
			{
				//test_LOC_V entity = m_Rep.GetById(id);
				Apps.Models.SCV.test.test_LOC_V_MODEL model = new Apps.Models.SCV.test.test_LOC_V_MODEL();
							  				model.INTERNAL_LOCATION_INV = entity.INTERNAL_LOCATION_INV;
				model.WAREHOUSE = entity.WAREHOUSE;
				model.LOCATION = entity.LOCATION;
				model.ITEM = entity.ITEM;
				model.ITEM_DESC = entity.ITEM_DESC;
				model.COMPANY = entity.COMPANY;
				model.PERMANENT = entity.PERMANENT;
				model.ATTRIBUTE_NUM = entity.ATTRIBUTE_NUM;
				model.ON_HAND_QTY = entity.ON_HAND_QTY;
				model.IN_TRANSIT_QTY = entity.IN_TRANSIT_QTY;
				model.ALLOCATED_QTY = entity.ALLOCATED_QTY;
				model.QUANTITY_UM = entity.QUANTITY_UM;
				model.INVENTORY_STS = entity.INVENTORY_STS;
				model.AGING_DATE = entity.AGING_DATE;
				model.USER_STAMP = entity.USER_STAMP;
				model.DATE_TIME_STAMP = entity.DATE_TIME_STAMP;
				model.LPN = entity.LPN;
				model.PARENT_LPN = entity.PARENT_LPN;
				model.ATTRIBUTE1 = entity.ATTRIBUTE1;
				model.ATTRIBUTE2 = entity.ATTRIBUTE2;
				model.ATTRIBUTE3 = entity.ATTRIBUTE3;
				model.ATTRIBUTE4 = entity.ATTRIBUTE4;
				model.ATTRIBUTE5 = entity.ATTRIBUTE5;
				model.ATTRIBUTE6 = entity.ATTRIBUTE6;
				model.ATTRIBUTE7 = entity.ATTRIBUTE7;
				model.ATTRIBUTE8 = entity.ATTRIBUTE8;
				model.USER_DEF1 = entity.USER_DEF1;
				model.USER_DEF2 = entity.USER_DEF2;
				model.USER_DEF3 = entity.USER_DEF3;
				model.USER_DEF4 = entity.USER_DEF4;
				model.USER_DEF5 = entity.USER_DEF5;
				model.USER_DEF6 = entity.USER_DEF6;
				model.USER_DEF7 = entity.USER_DEF7;
				model.USER_DEF8 = entity.USER_DEF8;
 
				return model;
			}
			else
			{
				return null;
			}
		}

	 

	}
}
