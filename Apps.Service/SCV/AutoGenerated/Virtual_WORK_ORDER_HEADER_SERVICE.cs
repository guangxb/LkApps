//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Microsoft.Practices.Unity;
using System.Transactions;
using Apps.Locale;
using System.Linq.Expressions;
namespace Apps.Service.SCV.WORK
{
	public class Virtual_WORK_ORDER_HEADER_SERVICE
	{

		public Apps.IRepository.SCV.ISCVDBSession SCVDBSession{
			 get
			{
				return Service.SCV.SCVDBSessionFactory.GetDBSession();
			}
		}
	   
		public Apps.IRepository.SCV.WORK.IWORK_ORDER_HEADER_REPOSITORY m_Rep{
			 get
			{
				return SCVDBSession.WORK_ORDER_HEADER;
			}
		}
		

		public virtual List<Apps.Models.SCV.WORK.WORK_ORDER_HEADER_MODEL> GetList(Expression<Func<Apps.Models.WORK_ORDER_HEADER, bool>> where = null){
		
				IQueryable<Apps.Models.WORK_ORDER_HEADER> queryData = m_Rep.GetList(where);
				return CreateModelList(ref queryData);
		}

		public virtual List<Apps.Models.SCV.WORK.WORK_ORDER_HEADER_MODEL> GetListSort<TKey>(Expression<Func<Apps.Models.WORK_ORDER_HEADER, bool>> where,Expression<Func<Apps.Models.WORK_ORDER_HEADER, TKey>>orderBy, bool isAsc = true){
		
				IQueryable<Apps.Models.WORK_ORDER_HEADER> queryData = m_Rep.GetListSort(where, orderBy, isAsc);
				return CreateModelList(ref queryData);
		}

		public virtual List<Apps.Models.SCV.WORK.WORK_ORDER_HEADER_MODEL> GetList(ref GridPager pager, string queryStr,Expression<Func<Apps.Models.WORK_ORDER_HEADER, bool>> where = null)
		{

			IQueryable<Apps.Models.WORK_ORDER_HEADER> queryData;
			
			if (!string.IsNullOrWhiteSpace(queryStr))
			{
				queryData = m_Rep.GetList(where
								
								,a=>a.WAREHOUSE.Contains(queryStr)
								|| a.COMPANY.Contains(queryStr)
								|| a.ITEM.Contains(queryStr)
								|| a.ITEM_DESC.Contains(queryStr)
								
								|| a.WORK_ORDER_ID.Contains(queryStr)
								|| a.BUILD_LOC.Contains(queryStr)
								
								
								
								|| a.QTY_UM.Contains(queryStr)
								
								
								
								
								
								|| a.MANUALLY_ENTERED.Contains(queryStr)
								|| a.BUILD_INSTRUCTIONS.Contains(queryStr)
								|| a.USER_DEF1.Contains(queryStr)
								|| a.USER_DEF2.Contains(queryStr)
								|| a.USER_DEF3.Contains(queryStr)
								|| a.USER_DEF4.Contains(queryStr)
								|| a.USER_DEF5.Contains(queryStr)
								|| a.USER_DEF6.Contains(queryStr)
								|| a.USER_DEF7.Contains(queryStr)
								|| a.USER_DEF8.Contains(queryStr)
								|| a.USER_STAMP.Contains(queryStr)
								|| a.PROCESS_STAMP.Contains(queryStr)
								
								|| a.IN_ALLOCATION.Contains(queryStr)
								|| a.CONDITION.Contains(queryStr)
								|| a.ALLOC_ATTEMPTED.Contains(queryStr)
								|| a.IN_CONFIRMATION.Contains(queryStr)
								);
			}else{
				queryData = m_Rep.GetList(where);
			}
			
		  
			pager.totalRows = queryData.Count();
			//排序
			queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
			return CreateModelList(ref queryData);
		}
		public virtual List<Apps.Models.SCV.WORK.WORK_ORDER_HEADER_MODEL> CreateModelList(ref IQueryable<Apps.Models.WORK_ORDER_HEADER> queryData)
		{

			List<Apps.Models.SCV.WORK.WORK_ORDER_HEADER_MODEL> modelList = (from r in queryData
											  select new Apps.Models.SCV.WORK.WORK_ORDER_HEADER_MODEL
											  {
													INTERNAL_NUM = r.INTERNAL_NUM,
													WAREHOUSE = r.WAREHOUSE,
													COMPANY = r.COMPANY,
													ITEM = r.ITEM,
													ITEM_DESC = r.ITEM_DESC,
													REVISION_NUM = r.REVISION_NUM,
													WORK_ORDER_ID = r.WORK_ORDER_ID,
													BUILD_LOC = r.BUILD_LOC,
													TOTAL_QTY = r.TOTAL_QTY,
													OPEN_QTY = r.OPEN_QTY,
													BUILT_QTY = r.BUILT_QTY,
													QTY_UM = r.QTY_UM,
													DUE_DATE = r.DUE_DATE,
													CREATED_DATE_TIME = r.CREATED_DATE_TIME,
													RELEASED_DATE_TIME = r.RELEASED_DATE_TIME,
													COMPLETION_DATE_TIME = r.COMPLETION_DATE_TIME,
													PLANNED_UNIT_BUILD_TIME = r.PLANNED_UNIT_BUILD_TIME,
													MANUALLY_ENTERED = r.MANUALLY_ENTERED,
													BUILD_INSTRUCTIONS = r.BUILD_INSTRUCTIONS,
													USER_DEF1 = r.USER_DEF1,
													USER_DEF2 = r.USER_DEF2,
													USER_DEF3 = r.USER_DEF3,
													USER_DEF4 = r.USER_DEF4,
													USER_DEF5 = r.USER_DEF5,
													USER_DEF6 = r.USER_DEF6,
													USER_DEF7 = r.USER_DEF7,
													USER_DEF8 = r.USER_DEF8,
													USER_STAMP = r.USER_STAMP,
													PROCESS_STAMP = r.PROCESS_STAMP,
													LAST_MODIFIED_DATE_TIME = r.LAST_MODIFIED_DATE_TIME,
													IN_ALLOCATION = r.IN_ALLOCATION,
													CONDITION = r.CONDITION,
													ALLOC_ATTEMPTED = r.ALLOC_ATTEMPTED,
													IN_CONFIRMATION = r.IN_CONFIRMATION,
          
											  }).ToList();

			return modelList;
		}

		public virtual void Create(ref ValidationErrors errors, Apps.Models.SCV.WORK.WORK_ORDER_HEADER_MODEL model)
		{
				Apps.Models.WORK_ORDER_HEADER entity = m_Rep.GetById(model.INTERNAL_NUM);
				if (entity != null)
				{
					errors.Add(Resource.PrimaryRepeat);
					return;
				}
				entity = new Apps.Models.WORK_ORDER_HEADER();
			   				entity.INTERNAL_NUM = model.INTERNAL_NUM;
				entity.WAREHOUSE = model.WAREHOUSE;
				entity.COMPANY = model.COMPANY;
				entity.ITEM = model.ITEM;
				entity.ITEM_DESC = model.ITEM_DESC;
				entity.REVISION_NUM = model.REVISION_NUM;
				entity.WORK_ORDER_ID = model.WORK_ORDER_ID;
				entity.BUILD_LOC = model.BUILD_LOC;
				entity.TOTAL_QTY = model.TOTAL_QTY;
				entity.OPEN_QTY = model.OPEN_QTY;
				entity.BUILT_QTY = model.BUILT_QTY;
				entity.QTY_UM = model.QTY_UM;
				entity.DUE_DATE = model.DUE_DATE;
				entity.CREATED_DATE_TIME = model.CREATED_DATE_TIME;
				entity.RELEASED_DATE_TIME = model.RELEASED_DATE_TIME;
				entity.COMPLETION_DATE_TIME = model.COMPLETION_DATE_TIME;
				entity.PLANNED_UNIT_BUILD_TIME = model.PLANNED_UNIT_BUILD_TIME;
				entity.MANUALLY_ENTERED = model.MANUALLY_ENTERED;
				entity.BUILD_INSTRUCTIONS = model.BUILD_INSTRUCTIONS;
				entity.USER_DEF1 = model.USER_DEF1;
				entity.USER_DEF2 = model.USER_DEF2;
				entity.USER_DEF3 = model.USER_DEF3;
				entity.USER_DEF4 = model.USER_DEF4;
				entity.USER_DEF5 = model.USER_DEF5;
				entity.USER_DEF6 = model.USER_DEF6;
				entity.USER_DEF7 = model.USER_DEF7;
				entity.USER_DEF8 = model.USER_DEF8;
				entity.USER_STAMP = model.USER_STAMP;
				entity.PROCESS_STAMP = model.PROCESS_STAMP;
				entity.LAST_MODIFIED_DATE_TIME = model.LAST_MODIFIED_DATE_TIME;
				entity.IN_ALLOCATION = model.IN_ALLOCATION;
				entity.CONDITION = model.CONDITION;
				entity.ALLOC_ATTEMPTED = model.ALLOC_ATTEMPTED;
				entity.IN_CONFIRMATION = model.IN_CONFIRMATION;
  
				m_Rep.Create(entity);
		}



		 public virtual void RemoveById(ref ValidationErrors errors, string id)
		{
			
				m_Rep.RemoveById(id);
			
		}

		public virtual void RemoveByIds(ref ValidationErrors errors, string[] deleteCollection)
		{
				if (deleteCollection != null)
				{
				   //事务批量删除
				   // using (TransactionScope transactionScope = new TransactionScope())
				   // {
				   //     if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
				   //     {
				   //         transactionScope.Complete();
				   //         return true;
				   //     }
				   //    else
				   //     {
				   //         Transaction.Current.Rollback();
				   //         return false;
				   //     }
				   // }
				   m_Rep.RemoveById(deleteCollection);
				}
		}

		
	   

		public virtual void Modify(ref ValidationErrors errors, Apps.Models.SCV.WORK.WORK_ORDER_HEADER_MODEL model,params string[] updateProperties)
		{
				Apps.Models.WORK_ORDER_HEADER entity = m_Rep.GetById(model.INTERNAL_NUM);
				if (entity == null)
				{
					errors.Add(Resource.Disable);
					return;
				}
							  				if (updateProperties.Count() <= 0){
										entity.INTERNAL_NUM = model.INTERNAL_NUM;
											entity.WAREHOUSE = model.WAREHOUSE;
											entity.COMPANY = model.COMPANY;
											entity.ITEM = model.ITEM;
											entity.ITEM_DESC = model.ITEM_DESC;
											entity.REVISION_NUM = model.REVISION_NUM;
											entity.WORK_ORDER_ID = model.WORK_ORDER_ID;
											entity.BUILD_LOC = model.BUILD_LOC;
											entity.TOTAL_QTY = model.TOTAL_QTY;
											entity.OPEN_QTY = model.OPEN_QTY;
											entity.BUILT_QTY = model.BUILT_QTY;
											entity.QTY_UM = model.QTY_UM;
											entity.DUE_DATE = model.DUE_DATE;
											entity.CREATED_DATE_TIME = model.CREATED_DATE_TIME;
											entity.RELEASED_DATE_TIME = model.RELEASED_DATE_TIME;
											entity.COMPLETION_DATE_TIME = model.COMPLETION_DATE_TIME;
											entity.PLANNED_UNIT_BUILD_TIME = model.PLANNED_UNIT_BUILD_TIME;
											entity.MANUALLY_ENTERED = model.MANUALLY_ENTERED;
											entity.BUILD_INSTRUCTIONS = model.BUILD_INSTRUCTIONS;
											entity.USER_DEF1 = model.USER_DEF1;
											entity.USER_DEF2 = model.USER_DEF2;
											entity.USER_DEF3 = model.USER_DEF3;
											entity.USER_DEF4 = model.USER_DEF4;
											entity.USER_DEF5 = model.USER_DEF5;
											entity.USER_DEF6 = model.USER_DEF6;
											entity.USER_DEF7 = model.USER_DEF7;
											entity.USER_DEF8 = model.USER_DEF8;
											entity.USER_STAMP = model.USER_STAMP;
											entity.PROCESS_STAMP = model.PROCESS_STAMP;
											entity.LAST_MODIFIED_DATE_TIME = model.LAST_MODIFIED_DATE_TIME;
											entity.IN_ALLOCATION = model.IN_ALLOCATION;
											entity.CONDITION = model.CONDITION;
											entity.ALLOC_ATTEMPTED = model.ALLOC_ATTEMPTED;
											entity.IN_CONFIRMATION = model.IN_CONFIRMATION;
									}else{
					
						Type type = typeof(Apps.Models.SCV.WORK.WORK_ORDER_HEADER_MODEL);
						Type typeE = typeof(Apps.Models.WORK_ORDER_HEADER);
						foreach (var item in updateProperties) {
						System.Reflection.PropertyInfo pi = type.GetProperty(item);
						System.Reflection.PropertyInfo piE = typeE.GetProperty(item);
						piE.SetValue(entity,pi.GetValue(model),null);
				}
				}
				 

				m_Rep.Modify(entity,updateProperties);
		}

	  

		public virtual Apps.Models.SCV.WORK.WORK_ORDER_HEADER_MODEL GetById(string id)
		{
			Apps.Models.WORK_ORDER_HEADER entity = m_Rep.GetById(id);
			if (entity!=null)
			{
				//WORK_ORDER_HEADER entity = m_Rep.GetById(id);
				Apps.Models.SCV.WORK.WORK_ORDER_HEADER_MODEL model = new Apps.Models.SCV.WORK.WORK_ORDER_HEADER_MODEL();
							  				model.INTERNAL_NUM = entity.INTERNAL_NUM;
				model.WAREHOUSE = entity.WAREHOUSE;
				model.COMPANY = entity.COMPANY;
				model.ITEM = entity.ITEM;
				model.ITEM_DESC = entity.ITEM_DESC;
				model.REVISION_NUM = entity.REVISION_NUM;
				model.WORK_ORDER_ID = entity.WORK_ORDER_ID;
				model.BUILD_LOC = entity.BUILD_LOC;
				model.TOTAL_QTY = entity.TOTAL_QTY;
				model.OPEN_QTY = entity.OPEN_QTY;
				model.BUILT_QTY = entity.BUILT_QTY;
				model.QTY_UM = entity.QTY_UM;
				model.DUE_DATE = entity.DUE_DATE;
				model.CREATED_DATE_TIME = entity.CREATED_DATE_TIME;
				model.RELEASED_DATE_TIME = entity.RELEASED_DATE_TIME;
				model.COMPLETION_DATE_TIME = entity.COMPLETION_DATE_TIME;
				model.PLANNED_UNIT_BUILD_TIME = entity.PLANNED_UNIT_BUILD_TIME;
				model.MANUALLY_ENTERED = entity.MANUALLY_ENTERED;
				model.BUILD_INSTRUCTIONS = entity.BUILD_INSTRUCTIONS;
				model.USER_DEF1 = entity.USER_DEF1;
				model.USER_DEF2 = entity.USER_DEF2;
				model.USER_DEF3 = entity.USER_DEF3;
				model.USER_DEF4 = entity.USER_DEF4;
				model.USER_DEF5 = entity.USER_DEF5;
				model.USER_DEF6 = entity.USER_DEF6;
				model.USER_DEF7 = entity.USER_DEF7;
				model.USER_DEF8 = entity.USER_DEF8;
				model.USER_STAMP = entity.USER_STAMP;
				model.PROCESS_STAMP = entity.PROCESS_STAMP;
				model.LAST_MODIFIED_DATE_TIME = entity.LAST_MODIFIED_DATE_TIME;
				model.IN_ALLOCATION = entity.IN_ALLOCATION;
				model.CONDITION = entity.CONDITION;
				model.ALLOC_ATTEMPTED = entity.ALLOC_ATTEMPTED;
				model.IN_CONFIRMATION = entity.IN_CONFIRMATION;
 
				return model;
			}
			else
			{
				return null;
			}
		}

	 

	}
}
