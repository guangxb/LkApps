//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Microsoft.Practices.Unity;
using System.Transactions;
using Apps.Locale;
using System.Linq.Expressions;
namespace Apps.Service.SCV.CONTAINER
{
	public class Virtual_CONTAINER_TYPE_SERVICE
	{

		public Apps.IRepository.SCV.ISCVDBSession SCVDBSession{
			 get
			{
				return Service.SCV.SCVDBSessionFactory.GetDBSession();
			}
		}
	   
		public Apps.IRepository.SCV.CONTAINER.ICONTAINER_TYPE_REPOSITORY m_Rep{
			 get
			{
				return SCVDBSession.CONTAINER_TYPE;
			}
		}
		

		public virtual List<Apps.Models.SCV.CONTAINER.CONTAINER_TYPE_MODEL> GetList(Expression<Func<Apps.Models.CONTAINER_TYPE, bool>> where = null){
		
				IQueryable<Apps.Models.CONTAINER_TYPE> queryData = m_Rep.GetList(where);
				return CreateModelList(ref queryData);
		}

		public virtual List<Apps.Models.SCV.CONTAINER.CONTAINER_TYPE_MODEL> GetListSort<TKey>(Expression<Func<Apps.Models.CONTAINER_TYPE, bool>> where,Expression<Func<Apps.Models.CONTAINER_TYPE, TKey>>orderBy, bool isAsc = true){
		
				IQueryable<Apps.Models.CONTAINER_TYPE> queryData = m_Rep.GetListSort(where, orderBy, isAsc);
				return CreateModelList(ref queryData);
		}

		public virtual List<Apps.Models.SCV.CONTAINER.CONTAINER_TYPE_MODEL> GetList(ref GridPager pager, string queryStr,Expression<Func<Apps.Models.CONTAINER_TYPE, bool>> where = null)
		{

			IQueryable<Apps.Models.CONTAINER_TYPE> queryData;
			
			if (!string.IsNullOrWhiteSpace(queryStr))
			{
				queryData = m_Rep.GetList(where
								
								,a=>a.CONTAINER_TYPE1.Contains(queryStr)
								|| a.DESCRIPTION.Contains(queryStr)
								|| a.CONTAINER_CLASS.Contains(queryStr)
								|| a.CONTAINER_GROUP.Contains(queryStr)
								
								
								|| a.WEIGHT_UM.Contains(queryStr)
								
								
								
								|| a.DIMENSION_UM.Contains(queryStr)
								
								
								
								|| a.USE_AS_DEFAULT.Contains(queryStr)
								|| a.RATING_SYMBOL.Contains(queryStr)
								|| a.ACTIVE.Contains(queryStr)
								|| a.PROCESS_STAMP.Contains(queryStr)
								
								|| a.USER_DEF1.Contains(queryStr)
								|| a.USER_DEF2.Contains(queryStr)
								|| a.USER_DEF3.Contains(queryStr)
								|| a.USER_DEF4.Contains(queryStr)
								|| a.USER_DEF5.Contains(queryStr)
								|| a.USER_DEF6.Contains(queryStr)
								|| a.USER_DEF7.Contains(queryStr)
								|| a.USER_DEF8.Contains(queryStr)
								|| a.USER_STAMP.Contains(queryStr)
								);
			}else{
				queryData = m_Rep.GetList(where);
			}
			
		  
			pager.totalRows = queryData.Count();
			//排序
			queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
			return CreateModelList(ref queryData);
		}
		public virtual List<Apps.Models.SCV.CONTAINER.CONTAINER_TYPE_MODEL> CreateModelList(ref IQueryable<Apps.Models.CONTAINER_TYPE> queryData)
		{

			List<Apps.Models.SCV.CONTAINER.CONTAINER_TYPE_MODEL> modelList = (from r in queryData
											  select new Apps.Models.SCV.CONTAINER.CONTAINER_TYPE_MODEL
											  {
													INTERNAL_NUM = r.INTERNAL_NUM,
													CONTAINER_TYPE1 = r.CONTAINER_TYPE1,
													DESCRIPTION = r.DESCRIPTION,
													CONTAINER_CLASS = r.CONTAINER_CLASS,
													CONTAINER_GROUP = r.CONTAINER_GROUP,
													SEQUENCE = r.SEQUENCE,
													EMPTY_WEIGHT = r.EMPTY_WEIGHT,
													WEIGHT_UM = r.WEIGHT_UM,
													LENGTH = r.LENGTH,
													WIDTH = r.WIDTH,
													HEIGHT = r.HEIGHT,
													DIMENSION_UM = r.DIMENSION_UM,
													MAXIMUM_WEIGHT = r.MAXIMUM_WEIGHT,
													WEIGHT_TOLERANCE = r.WEIGHT_TOLERANCE,
													FILL_PERCENT = r.FILL_PERCENT,
													USE_AS_DEFAULT = r.USE_AS_DEFAULT,
													RATING_SYMBOL = r.RATING_SYMBOL,
													ACTIVE = r.ACTIVE,
													PROCESS_STAMP = r.PROCESS_STAMP,
													DATE_TIME_STAMP = r.DATE_TIME_STAMP,
													USER_DEF1 = r.USER_DEF1,
													USER_DEF2 = r.USER_DEF2,
													USER_DEF3 = r.USER_DEF3,
													USER_DEF4 = r.USER_DEF4,
													USER_DEF5 = r.USER_DEF5,
													USER_DEF6 = r.USER_DEF6,
													USER_DEF7 = r.USER_DEF7,
													USER_DEF8 = r.USER_DEF8,
													USER_STAMP = r.USER_STAMP,
          
											  }).ToList();

			return modelList;
		}

		public virtual void Create(ref ValidationErrors errors, Apps.Models.SCV.CONTAINER.CONTAINER_TYPE_MODEL model)
		{
				Apps.Models.CONTAINER_TYPE entity = m_Rep.GetById(model.INTERNAL_NUM);
				if (entity != null)
				{
					errors.Add(Resource.PrimaryRepeat);
					return;
				}
				entity = new Apps.Models.CONTAINER_TYPE();
			   				entity.INTERNAL_NUM = model.INTERNAL_NUM;
				entity.CONTAINER_TYPE1 = model.CONTAINER_TYPE1;
				entity.DESCRIPTION = model.DESCRIPTION;
				entity.CONTAINER_CLASS = model.CONTAINER_CLASS;
				entity.CONTAINER_GROUP = model.CONTAINER_GROUP;
				entity.SEQUENCE = model.SEQUENCE;
				entity.EMPTY_WEIGHT = model.EMPTY_WEIGHT;
				entity.WEIGHT_UM = model.WEIGHT_UM;
				entity.LENGTH = model.LENGTH;
				entity.WIDTH = model.WIDTH;
				entity.HEIGHT = model.HEIGHT;
				entity.DIMENSION_UM = model.DIMENSION_UM;
				entity.MAXIMUM_WEIGHT = model.MAXIMUM_WEIGHT;
				entity.WEIGHT_TOLERANCE = model.WEIGHT_TOLERANCE;
				entity.FILL_PERCENT = model.FILL_PERCENT;
				entity.USE_AS_DEFAULT = model.USE_AS_DEFAULT;
				entity.RATING_SYMBOL = model.RATING_SYMBOL;
				entity.ACTIVE = model.ACTIVE;
				entity.PROCESS_STAMP = model.PROCESS_STAMP;
				entity.DATE_TIME_STAMP = model.DATE_TIME_STAMP;
				entity.USER_DEF1 = model.USER_DEF1;
				entity.USER_DEF2 = model.USER_DEF2;
				entity.USER_DEF3 = model.USER_DEF3;
				entity.USER_DEF4 = model.USER_DEF4;
				entity.USER_DEF5 = model.USER_DEF5;
				entity.USER_DEF6 = model.USER_DEF6;
				entity.USER_DEF7 = model.USER_DEF7;
				entity.USER_DEF8 = model.USER_DEF8;
				entity.USER_STAMP = model.USER_STAMP;
  
				m_Rep.Create(entity);
		}



		 public virtual void RemoveById(ref ValidationErrors errors, string id)
		{
			
				m_Rep.RemoveById(id);
			
		}

		public virtual void RemoveByIds(ref ValidationErrors errors, string[] deleteCollection)
		{
				if (deleteCollection != null)
				{
				   //事务批量删除
				   // using (TransactionScope transactionScope = new TransactionScope())
				   // {
				   //     if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
				   //     {
				   //         transactionScope.Complete();
				   //         return true;
				   //     }
				   //    else
				   //     {
				   //         Transaction.Current.Rollback();
				   //         return false;
				   //     }
				   // }
				   m_Rep.RemoveById(deleteCollection);
				}
		}

		
	   

		public virtual void Modify(ref ValidationErrors errors, Apps.Models.SCV.CONTAINER.CONTAINER_TYPE_MODEL model,params string[] updateProperties)
		{
				Apps.Models.CONTAINER_TYPE entity = m_Rep.GetById(model.INTERNAL_NUM);
				if (entity == null)
				{
					errors.Add(Resource.Disable);
					return;
				}
							  				if (updateProperties.Count() <= 0){
										entity.INTERNAL_NUM = model.INTERNAL_NUM;
											entity.CONTAINER_TYPE1 = model.CONTAINER_TYPE1;
											entity.DESCRIPTION = model.DESCRIPTION;
											entity.CONTAINER_CLASS = model.CONTAINER_CLASS;
											entity.CONTAINER_GROUP = model.CONTAINER_GROUP;
											entity.SEQUENCE = model.SEQUENCE;
											entity.EMPTY_WEIGHT = model.EMPTY_WEIGHT;
											entity.WEIGHT_UM = model.WEIGHT_UM;
											entity.LENGTH = model.LENGTH;
											entity.WIDTH = model.WIDTH;
											entity.HEIGHT = model.HEIGHT;
											entity.DIMENSION_UM = model.DIMENSION_UM;
											entity.MAXIMUM_WEIGHT = model.MAXIMUM_WEIGHT;
											entity.WEIGHT_TOLERANCE = model.WEIGHT_TOLERANCE;
											entity.FILL_PERCENT = model.FILL_PERCENT;
											entity.USE_AS_DEFAULT = model.USE_AS_DEFAULT;
											entity.RATING_SYMBOL = model.RATING_SYMBOL;
											entity.ACTIVE = model.ACTIVE;
											entity.PROCESS_STAMP = model.PROCESS_STAMP;
											entity.DATE_TIME_STAMP = model.DATE_TIME_STAMP;
											entity.USER_DEF1 = model.USER_DEF1;
											entity.USER_DEF2 = model.USER_DEF2;
											entity.USER_DEF3 = model.USER_DEF3;
											entity.USER_DEF4 = model.USER_DEF4;
											entity.USER_DEF5 = model.USER_DEF5;
											entity.USER_DEF6 = model.USER_DEF6;
											entity.USER_DEF7 = model.USER_DEF7;
											entity.USER_DEF8 = model.USER_DEF8;
											entity.USER_STAMP = model.USER_STAMP;
									}else{
					
						Type type = typeof(Apps.Models.SCV.CONTAINER.CONTAINER_TYPE_MODEL);
						Type typeE = typeof(Apps.Models.CONTAINER_TYPE);
						foreach (var item in updateProperties) {
						System.Reflection.PropertyInfo pi = type.GetProperty(item);
						System.Reflection.PropertyInfo piE = typeE.GetProperty(item);
						piE.SetValue(entity,pi.GetValue(model),null);
				}
				}
				 

				m_Rep.Modify(entity,updateProperties);
		}

	  

		public virtual Apps.Models.SCV.CONTAINER.CONTAINER_TYPE_MODEL GetById(string id)
		{
			Apps.Models.CONTAINER_TYPE entity = m_Rep.GetById(id);
			if (entity!=null)
			{
				//CONTAINER_TYPE entity = m_Rep.GetById(id);
				Apps.Models.SCV.CONTAINER.CONTAINER_TYPE_MODEL model = new Apps.Models.SCV.CONTAINER.CONTAINER_TYPE_MODEL();
							  				model.INTERNAL_NUM = entity.INTERNAL_NUM;
				model.CONTAINER_TYPE1 = entity.CONTAINER_TYPE1;
				model.DESCRIPTION = entity.DESCRIPTION;
				model.CONTAINER_CLASS = entity.CONTAINER_CLASS;
				model.CONTAINER_GROUP = entity.CONTAINER_GROUP;
				model.SEQUENCE = entity.SEQUENCE;
				model.EMPTY_WEIGHT = entity.EMPTY_WEIGHT;
				model.WEIGHT_UM = entity.WEIGHT_UM;
				model.LENGTH = entity.LENGTH;
				model.WIDTH = entity.WIDTH;
				model.HEIGHT = entity.HEIGHT;
				model.DIMENSION_UM = entity.DIMENSION_UM;
				model.MAXIMUM_WEIGHT = entity.MAXIMUM_WEIGHT;
				model.WEIGHT_TOLERANCE = entity.WEIGHT_TOLERANCE;
				model.FILL_PERCENT = entity.FILL_PERCENT;
				model.USE_AS_DEFAULT = entity.USE_AS_DEFAULT;
				model.RATING_SYMBOL = entity.RATING_SYMBOL;
				model.ACTIVE = entity.ACTIVE;
				model.PROCESS_STAMP = entity.PROCESS_STAMP;
				model.DATE_TIME_STAMP = entity.DATE_TIME_STAMP;
				model.USER_DEF1 = entity.USER_DEF1;
				model.USER_DEF2 = entity.USER_DEF2;
				model.USER_DEF3 = entity.USER_DEF3;
				model.USER_DEF4 = entity.USER_DEF4;
				model.USER_DEF5 = entity.USER_DEF5;
				model.USER_DEF6 = entity.USER_DEF6;
				model.USER_DEF7 = entity.USER_DEF7;
				model.USER_DEF8 = entity.USER_DEF8;
				model.USER_STAMP = entity.USER_STAMP;
 
				return model;
			}
			else
			{
				return null;
			}
		}

	 

	}
}
