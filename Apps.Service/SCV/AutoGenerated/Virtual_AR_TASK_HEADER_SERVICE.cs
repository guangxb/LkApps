//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Microsoft.Practices.Unity;
using System.Transactions;
using Apps.Locale;
using System.Linq.Expressions;
namespace Apps.Service.SCV.AR
{
	public class Virtual_AR_TASK_HEADER_SERVICE
	{

		public Apps.IRepository.SCV.ISCVDBSession SCVDBSession{
			 get
			{
				return Service.SCV.SCVDBSessionFactory.GetDBSession();
			}
		}
	   
		public Apps.IRepository.SCV.AR.IAR_TASK_HEADER_REPOSITORY m_Rep{
			 get
			{
				return SCVDBSession.AR_TASK_HEADER;
			}
		}
		

		public virtual List<Apps.Models.SCV.AR.AR_TASK_HEADER_MODEL> GetList(Expression<Func<Apps.Models.AR_TASK_HEADER, bool>> where = null){
		
				IQueryable<Apps.Models.AR_TASK_HEADER> queryData = m_Rep.GetList(where);
				return CreateModelList(ref queryData);
		}

		public virtual List<Apps.Models.SCV.AR.AR_TASK_HEADER_MODEL> GetListSort<TKey>(Expression<Func<Apps.Models.AR_TASK_HEADER, bool>> where,Expression<Func<Apps.Models.AR_TASK_HEADER, TKey>>orderBy, bool isAsc = true){
		
				IQueryable<Apps.Models.AR_TASK_HEADER> queryData = m_Rep.GetListSort(where, orderBy, isAsc);
				return CreateModelList(ref queryData);
		}

		public virtual List<Apps.Models.SCV.AR.AR_TASK_HEADER_MODEL> GetList(ref GridPager pager, string queryStr,Expression<Func<Apps.Models.AR_TASK_HEADER, bool>> where = null)
		{

			IQueryable<Apps.Models.AR_TASK_HEADER> queryData;
			
			if (!string.IsNullOrWhiteSpace(queryStr))
			{
				queryData = m_Rep.GetList(where
								
								,a=>a.WAREHOUSE.Contains(queryStr)
								|| a.COMPANY.Contains(queryStr)
								|| a.TASK_ID.Contains(queryStr)
								|| a.TASK_TYPE.Contains(queryStr)
								|| a.INTERNAL_TASK_TYPE.Contains(queryStr)
								
								|| a.REFERENCE_ID.Contains(queryStr)
								|| a.REFERENCE_NUM_TYPE.Contains(queryStr)
								|| a.ASSIGNED_USER.Contains(queryStr)
								|| a.CONFIRM_USER.Contains(queryStr)
								|| a.CONDITION.Contains(queryStr)
								|| a.HOLD_CODE.Contains(queryStr)
								|| a.USER_STAMP.Contains(queryStr)
								
								
								|| a.PICKING_CART_ID.Contains(queryStr)
								|| a.TRANS_CONT_ID.Contains(queryStr)
								|| a.USER_DEF1.Contains(queryStr)
								|| a.USER_DEF2.Contains(queryStr)
								|| a.USER_DEF3.Contains(queryStr)
								|| a.USER_DEF4.Contains(queryStr)
								|| a.USER_DEF5.Contains(queryStr)
								|| a.USER_DEF6.Contains(queryStr)
								|| a.USER_DEF7.Contains(queryStr)
								|| a.USER_DEF8.Contains(queryStr)
								
								
								
								|| a.LOCKED.Contains(queryStr)
								);
			}else{
				queryData = m_Rep.GetList(where);
			}
			
		  
			pager.totalRows = queryData.Count();
			//排序
			queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
			return CreateModelList(ref queryData);
		}
		public virtual List<Apps.Models.SCV.AR.AR_TASK_HEADER_MODEL> CreateModelList(ref IQueryable<Apps.Models.AR_TASK_HEADER> queryData)
		{

			List<Apps.Models.SCV.AR.AR_TASK_HEADER_MODEL> modelList = (from r in queryData
											  select new Apps.Models.SCV.AR.AR_TASK_HEADER_MODEL
											  {
													INTERNAL_TASK_NUM = r.INTERNAL_TASK_NUM,
													WAREHOUSE = r.WAREHOUSE,
													COMPANY = r.COMPANY,
													TASK_ID = r.TASK_ID,
													TASK_TYPE = r.TASK_TYPE,
													INTERNAL_TASK_TYPE = r.INTERNAL_TASK_TYPE,
													REFERENCE_NUM = r.REFERENCE_NUM,
													REFERENCE_ID = r.REFERENCE_ID,
													REFERENCE_NUM_TYPE = r.REFERENCE_NUM_TYPE,
													ASSIGNED_USER = r.ASSIGNED_USER,
													CONFIRM_USER = r.CONFIRM_USER,
													CONDITION = r.CONDITION,
													HOLD_CODE = r.HOLD_CODE,
													USER_STAMP = r.USER_STAMP,
													DATE_TIME_STAMP = r.DATE_TIME_STAMP,
													INTERNAL_WAVE_NUM = r.INTERNAL_WAVE_NUM,
													PICKING_CART_ID = r.PICKING_CART_ID,
													TRANS_CONT_ID = r.TRANS_CONT_ID,
													USER_DEF1 = r.USER_DEF1,
													USER_DEF2 = r.USER_DEF2,
													USER_DEF3 = r.USER_DEF3,
													USER_DEF4 = r.USER_DEF4,
													USER_DEF5 = r.USER_DEF5,
													USER_DEF6 = r.USER_DEF6,
													USER_DEF7 = r.USER_DEF7,
													USER_DEF8 = r.USER_DEF8,
													AGING_DATE_TIME = r.AGING_DATE_TIME,
													START_DATE_TIME = r.START_DATE_TIME,
													END_DATE_TIME = r.END_DATE_TIME,
													LOCKED = r.LOCKED,
          
											  }).ToList();

			return modelList;
		}

		public virtual void Create(ref ValidationErrors errors, Apps.Models.SCV.AR.AR_TASK_HEADER_MODEL model)
		{
				Apps.Models.AR_TASK_HEADER entity = m_Rep.GetById(model.INTERNAL_TASK_NUM);
				if (entity != null)
				{
					errors.Add(Resource.PrimaryRepeat);
					return;
				}
				entity = new Apps.Models.AR_TASK_HEADER();
			   				entity.INTERNAL_TASK_NUM = model.INTERNAL_TASK_NUM;
				entity.WAREHOUSE = model.WAREHOUSE;
				entity.COMPANY = model.COMPANY;
				entity.TASK_ID = model.TASK_ID;
				entity.TASK_TYPE = model.TASK_TYPE;
				entity.INTERNAL_TASK_TYPE = model.INTERNAL_TASK_TYPE;
				entity.REFERENCE_NUM = model.REFERENCE_NUM;
				entity.REFERENCE_ID = model.REFERENCE_ID;
				entity.REFERENCE_NUM_TYPE = model.REFERENCE_NUM_TYPE;
				entity.ASSIGNED_USER = model.ASSIGNED_USER;
				entity.CONFIRM_USER = model.CONFIRM_USER;
				entity.CONDITION = model.CONDITION;
				entity.HOLD_CODE = model.HOLD_CODE;
				entity.USER_STAMP = model.USER_STAMP;
				entity.DATE_TIME_STAMP = model.DATE_TIME_STAMP;
				entity.INTERNAL_WAVE_NUM = model.INTERNAL_WAVE_NUM;
				entity.PICKING_CART_ID = model.PICKING_CART_ID;
				entity.TRANS_CONT_ID = model.TRANS_CONT_ID;
				entity.USER_DEF1 = model.USER_DEF1;
				entity.USER_DEF2 = model.USER_DEF2;
				entity.USER_DEF3 = model.USER_DEF3;
				entity.USER_DEF4 = model.USER_DEF4;
				entity.USER_DEF5 = model.USER_DEF5;
				entity.USER_DEF6 = model.USER_DEF6;
				entity.USER_DEF7 = model.USER_DEF7;
				entity.USER_DEF8 = model.USER_DEF8;
				entity.AGING_DATE_TIME = model.AGING_DATE_TIME;
				entity.START_DATE_TIME = model.START_DATE_TIME;
				entity.END_DATE_TIME = model.END_DATE_TIME;
				entity.LOCKED = model.LOCKED;
  
				m_Rep.Create(entity);
		}



		 public virtual void RemoveById(ref ValidationErrors errors, string id)
		{
			
				m_Rep.RemoveById(id);
			
		}

		public virtual void RemoveByIds(ref ValidationErrors errors, string[] deleteCollection)
		{
				if (deleteCollection != null)
				{
				   //事务批量删除
				   // using (TransactionScope transactionScope = new TransactionScope())
				   // {
				   //     if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
				   //     {
				   //         transactionScope.Complete();
				   //         return true;
				   //     }
				   //    else
				   //     {
				   //         Transaction.Current.Rollback();
				   //         return false;
				   //     }
				   // }
				   m_Rep.RemoveById(deleteCollection);
				}
		}

		
	   

		public virtual void Modify(ref ValidationErrors errors, Apps.Models.SCV.AR.AR_TASK_HEADER_MODEL model,params string[] updateProperties)
		{
				Apps.Models.AR_TASK_HEADER entity = m_Rep.GetById(model.INTERNAL_TASK_NUM);
				if (entity == null)
				{
					errors.Add(Resource.Disable);
					return;
				}
							  				if (updateProperties.Count() <= 0){
										entity.INTERNAL_TASK_NUM = model.INTERNAL_TASK_NUM;
											entity.WAREHOUSE = model.WAREHOUSE;
											entity.COMPANY = model.COMPANY;
											entity.TASK_ID = model.TASK_ID;
											entity.TASK_TYPE = model.TASK_TYPE;
											entity.INTERNAL_TASK_TYPE = model.INTERNAL_TASK_TYPE;
											entity.REFERENCE_NUM = model.REFERENCE_NUM;
											entity.REFERENCE_ID = model.REFERENCE_ID;
											entity.REFERENCE_NUM_TYPE = model.REFERENCE_NUM_TYPE;
											entity.ASSIGNED_USER = model.ASSIGNED_USER;
											entity.CONFIRM_USER = model.CONFIRM_USER;
											entity.CONDITION = model.CONDITION;
											entity.HOLD_CODE = model.HOLD_CODE;
											entity.USER_STAMP = model.USER_STAMP;
											entity.DATE_TIME_STAMP = model.DATE_TIME_STAMP;
											entity.INTERNAL_WAVE_NUM = model.INTERNAL_WAVE_NUM;
											entity.PICKING_CART_ID = model.PICKING_CART_ID;
											entity.TRANS_CONT_ID = model.TRANS_CONT_ID;
											entity.USER_DEF1 = model.USER_DEF1;
											entity.USER_DEF2 = model.USER_DEF2;
											entity.USER_DEF3 = model.USER_DEF3;
											entity.USER_DEF4 = model.USER_DEF4;
											entity.USER_DEF5 = model.USER_DEF5;
											entity.USER_DEF6 = model.USER_DEF6;
											entity.USER_DEF7 = model.USER_DEF7;
											entity.USER_DEF8 = model.USER_DEF8;
											entity.AGING_DATE_TIME = model.AGING_DATE_TIME;
											entity.START_DATE_TIME = model.START_DATE_TIME;
											entity.END_DATE_TIME = model.END_DATE_TIME;
											entity.LOCKED = model.LOCKED;
									}else{
					
						Type type = typeof(Apps.Models.SCV.AR.AR_TASK_HEADER_MODEL);
						Type typeE = typeof(Apps.Models.AR_TASK_HEADER);
						foreach (var item in updateProperties) {
						System.Reflection.PropertyInfo pi = type.GetProperty(item);
						System.Reflection.PropertyInfo piE = typeE.GetProperty(item);
						piE.SetValue(entity,pi.GetValue(model),null);
				}
				}
				 

				m_Rep.Modify(entity,updateProperties);
		}

	  

		public virtual Apps.Models.SCV.AR.AR_TASK_HEADER_MODEL GetById(string id)
		{
			Apps.Models.AR_TASK_HEADER entity = m_Rep.GetById(id);
			if (entity!=null)
			{
				//AR_TASK_HEADER entity = m_Rep.GetById(id);
				Apps.Models.SCV.AR.AR_TASK_HEADER_MODEL model = new Apps.Models.SCV.AR.AR_TASK_HEADER_MODEL();
							  				model.INTERNAL_TASK_NUM = entity.INTERNAL_TASK_NUM;
				model.WAREHOUSE = entity.WAREHOUSE;
				model.COMPANY = entity.COMPANY;
				model.TASK_ID = entity.TASK_ID;
				model.TASK_TYPE = entity.TASK_TYPE;
				model.INTERNAL_TASK_TYPE = entity.INTERNAL_TASK_TYPE;
				model.REFERENCE_NUM = entity.REFERENCE_NUM;
				model.REFERENCE_ID = entity.REFERENCE_ID;
				model.REFERENCE_NUM_TYPE = entity.REFERENCE_NUM_TYPE;
				model.ASSIGNED_USER = entity.ASSIGNED_USER;
				model.CONFIRM_USER = entity.CONFIRM_USER;
				model.CONDITION = entity.CONDITION;
				model.HOLD_CODE = entity.HOLD_CODE;
				model.USER_STAMP = entity.USER_STAMP;
				model.DATE_TIME_STAMP = entity.DATE_TIME_STAMP;
				model.INTERNAL_WAVE_NUM = entity.INTERNAL_WAVE_NUM;
				model.PICKING_CART_ID = entity.PICKING_CART_ID;
				model.TRANS_CONT_ID = entity.TRANS_CONT_ID;
				model.USER_DEF1 = entity.USER_DEF1;
				model.USER_DEF2 = entity.USER_DEF2;
				model.USER_DEF3 = entity.USER_DEF3;
				model.USER_DEF4 = entity.USER_DEF4;
				model.USER_DEF5 = entity.USER_DEF5;
				model.USER_DEF6 = entity.USER_DEF6;
				model.USER_DEF7 = entity.USER_DEF7;
				model.USER_DEF8 = entity.USER_DEF8;
				model.AGING_DATE_TIME = entity.AGING_DATE_TIME;
				model.START_DATE_TIME = entity.START_DATE_TIME;
				model.END_DATE_TIME = entity.END_DATE_TIME;
				model.LOCKED = entity.LOCKED;
 
				return model;
			}
			else
			{
				return null;
			}
		}

	 

	}
}
