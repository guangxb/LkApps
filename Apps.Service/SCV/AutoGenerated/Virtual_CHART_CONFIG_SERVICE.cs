//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Microsoft.Practices.Unity;
using System.Transactions;
using Apps.Locale;
using System.Linq.Expressions;
namespace Apps.Service.SCV.CHART
{
	public class Virtual_CHART_CONFIG_SERVICE
	{

		public Apps.IRepository.SCV.ISCVDBSession SCVDBSession{
			 get
			{
				return Service.SCV.SCVDBSessionFactory.GetDBSession();
			}
		}
	   
		public Apps.IRepository.SCV.CHART.ICHART_CONFIG_REPOSITORY m_Rep{
			 get
			{
				return SCVDBSession.CHART_CONFIG;
			}
		}
		

		public virtual List<Apps.Models.SCV.CHART.CHART_CONFIG_MODEL> GetList(Expression<Func<Apps.Models.CHART_CONFIG, bool>> where = null){
		
				IQueryable<Apps.Models.CHART_CONFIG> queryData = m_Rep.GetList(where);
				return CreateModelList(ref queryData);
		}

		public virtual List<Apps.Models.SCV.CHART.CHART_CONFIG_MODEL> GetListSort<TKey>(Expression<Func<Apps.Models.CHART_CONFIG, bool>> where,Expression<Func<Apps.Models.CHART_CONFIG, TKey>>orderBy, bool isAsc = true){
		
				IQueryable<Apps.Models.CHART_CONFIG> queryData = m_Rep.GetListSort(where, orderBy, isAsc);
				return CreateModelList(ref queryData);
		}

		public virtual List<Apps.Models.SCV.CHART.CHART_CONFIG_MODEL> GetList(ref GridPager pager, string queryStr,Expression<Func<Apps.Models.CHART_CONFIG, bool>> where = null)
		{

			IQueryable<Apps.Models.CHART_CONFIG> queryData;
			
			if (!string.IsNullOrWhiteSpace(queryStr))
			{
				queryData = m_Rep.GetList(where
								
								,a=>a.CHART_TYPE.Contains(queryStr)
								|| a.TITLE.Contains(queryStr)
								|| a.STORED_PROC.Contains(queryStr)
								|| a.DATA_FIELD1.Contains(queryStr)
								|| a.DATA_FIELD2.Contains(queryStr)
								|| a.DATA_FIELD3.Contains(queryStr)
								|| a.DATA_FIELD4.Contains(queryStr)
								|| a.DATA_FIELD5.Contains(queryStr)
								|| a.DATA_FIELD6.Contains(queryStr)
								|| a.DATA_FIELD7.Contains(queryStr)
								|| a.DATA_FIELD8.Contains(queryStr)
								|| a.X_FIELD.Contains(queryStr)
								|| a.Y_FIELD.Contains(queryStr)
								
								
								
								
								|| a.ACTIVE.Contains(queryStr)
								|| a.CREATED_USER.Contains(queryStr)
								
								|| a.LAST_UPDATE_USER.Contains(queryStr)
								
								
								);
			}else{
				queryData = m_Rep.GetList(where);
			}
			
		  
			pager.totalRows = queryData.Count();
			//排序
			queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
			return CreateModelList(ref queryData);
		}
		public virtual List<Apps.Models.SCV.CHART.CHART_CONFIG_MODEL> CreateModelList(ref IQueryable<Apps.Models.CHART_CONFIG> queryData)
		{

			List<Apps.Models.SCV.CHART.CHART_CONFIG_MODEL> modelList = (from r in queryData
											  select new Apps.Models.SCV.CHART.CHART_CONFIG_MODEL
											  {
													INTERNAL_NUM = r.INTERNAL_NUM,
													CHART_TYPE = r.CHART_TYPE,
													TITLE = r.TITLE,
													STORED_PROC = r.STORED_PROC,
													DATA_FIELD1 = r.DATA_FIELD1,
													DATA_FIELD2 = r.DATA_FIELD2,
													DATA_FIELD3 = r.DATA_FIELD3,
													DATA_FIELD4 = r.DATA_FIELD4,
													DATA_FIELD5 = r.DATA_FIELD5,
													DATA_FIELD6 = r.DATA_FIELD6,
													DATA_FIELD7 = r.DATA_FIELD7,
													DATA_FIELD8 = r.DATA_FIELD8,
													X_FIELD = r.X_FIELD,
													Y_FIELD = r.Y_FIELD,
													ROW = r.ROW,
													SEQUENCE = r.SEQUENCE,
													WIDTH = r.WIDTH,
													HEIGHT = r.HEIGHT,
													ACTIVE = r.ACTIVE,
													CREATED_USER = r.CREATED_USER,
													CREATED_DATE_TIME = r.CREATED_DATE_TIME,
													LAST_UPDATE_USER = r.LAST_UPDATE_USER,
													LAST_UPDATE_DATE_TIME = r.LAST_UPDATE_DATE_TIME,
													SECOND = r.SECOND,
          
											  }).ToList();

			return modelList;
		}

		public virtual void Create(ref ValidationErrors errors, Apps.Models.SCV.CHART.CHART_CONFIG_MODEL model)
		{
				Apps.Models.CHART_CONFIG entity = m_Rep.GetById(model.INTERNAL_NUM);
				if (entity != null)
				{
					errors.Add(Resource.PrimaryRepeat);
					return;
				}
				entity = new Apps.Models.CHART_CONFIG();
			   				entity.INTERNAL_NUM = model.INTERNAL_NUM;
				entity.CHART_TYPE = model.CHART_TYPE;
				entity.TITLE = model.TITLE;
				entity.STORED_PROC = model.STORED_PROC;
				entity.DATA_FIELD1 = model.DATA_FIELD1;
				entity.DATA_FIELD2 = model.DATA_FIELD2;
				entity.DATA_FIELD3 = model.DATA_FIELD3;
				entity.DATA_FIELD4 = model.DATA_FIELD4;
				entity.DATA_FIELD5 = model.DATA_FIELD5;
				entity.DATA_FIELD6 = model.DATA_FIELD6;
				entity.DATA_FIELD7 = model.DATA_FIELD7;
				entity.DATA_FIELD8 = model.DATA_FIELD8;
				entity.X_FIELD = model.X_FIELD;
				entity.Y_FIELD = model.Y_FIELD;
				entity.ROW = model.ROW;
				entity.SEQUENCE = model.SEQUENCE;
				entity.WIDTH = model.WIDTH;
				entity.HEIGHT = model.HEIGHT;
				entity.ACTIVE = model.ACTIVE;
				entity.CREATED_USER = model.CREATED_USER;
				entity.CREATED_DATE_TIME = model.CREATED_DATE_TIME;
				entity.LAST_UPDATE_USER = model.LAST_UPDATE_USER;
				entity.LAST_UPDATE_DATE_TIME = model.LAST_UPDATE_DATE_TIME;
				entity.SECOND = model.SECOND;
  
				m_Rep.Create(entity);
		}



		 public virtual void RemoveById(ref ValidationErrors errors, string id)
		{
			
				m_Rep.RemoveById(id);
			
		}

		public virtual void RemoveByIds(ref ValidationErrors errors, string[] deleteCollection)
		{
				if (deleteCollection != null)
				{
				   //事务批量删除
				   // using (TransactionScope transactionScope = new TransactionScope())
				   // {
				   //     if (m_Rep.Delete(deleteCollection) == deleteCollection.Length)
				   //     {
				   //         transactionScope.Complete();
				   //         return true;
				   //     }
				   //    else
				   //     {
				   //         Transaction.Current.Rollback();
				   //         return false;
				   //     }
				   // }
				   m_Rep.RemoveById(deleteCollection);
				}
		}

		
	   

		public virtual void Modify(ref ValidationErrors errors, Apps.Models.SCV.CHART.CHART_CONFIG_MODEL model,params string[] updateProperties)
		{
				Apps.Models.CHART_CONFIG entity = m_Rep.GetById(model.INTERNAL_NUM);
				if (entity == null)
				{
					errors.Add(Resource.Disable);
					return;
				}
							  				if (updateProperties.Count() <= 0){
										entity.INTERNAL_NUM = model.INTERNAL_NUM;
											entity.CHART_TYPE = model.CHART_TYPE;
											entity.TITLE = model.TITLE;
											entity.STORED_PROC = model.STORED_PROC;
											entity.DATA_FIELD1 = model.DATA_FIELD1;
											entity.DATA_FIELD2 = model.DATA_FIELD2;
											entity.DATA_FIELD3 = model.DATA_FIELD3;
											entity.DATA_FIELD4 = model.DATA_FIELD4;
											entity.DATA_FIELD5 = model.DATA_FIELD5;
											entity.DATA_FIELD6 = model.DATA_FIELD6;
											entity.DATA_FIELD7 = model.DATA_FIELD7;
											entity.DATA_FIELD8 = model.DATA_FIELD8;
											entity.X_FIELD = model.X_FIELD;
											entity.Y_FIELD = model.Y_FIELD;
											entity.ROW = model.ROW;
											entity.SEQUENCE = model.SEQUENCE;
											entity.WIDTH = model.WIDTH;
											entity.HEIGHT = model.HEIGHT;
											entity.ACTIVE = model.ACTIVE;
											entity.CREATED_USER = model.CREATED_USER;
											entity.CREATED_DATE_TIME = model.CREATED_DATE_TIME;
											entity.LAST_UPDATE_USER = model.LAST_UPDATE_USER;
											entity.LAST_UPDATE_DATE_TIME = model.LAST_UPDATE_DATE_TIME;
											entity.SECOND = model.SECOND;
									}else{
					
						Type type = typeof(Apps.Models.SCV.CHART.CHART_CONFIG_MODEL);
						Type typeE = typeof(Apps.Models.CHART_CONFIG);
						foreach (var item in updateProperties) {
						System.Reflection.PropertyInfo pi = type.GetProperty(item);
						System.Reflection.PropertyInfo piE = typeE.GetProperty(item);
						piE.SetValue(entity,pi.GetValue(model),null);
				}
				}
				 

				m_Rep.Modify(entity,updateProperties);
		}

	  

		public virtual Apps.Models.SCV.CHART.CHART_CONFIG_MODEL GetById(string id)
		{
			Apps.Models.CHART_CONFIG entity = m_Rep.GetById(id);
			if (entity!=null)
			{
				//CHART_CONFIG entity = m_Rep.GetById(id);
				Apps.Models.SCV.CHART.CHART_CONFIG_MODEL model = new Apps.Models.SCV.CHART.CHART_CONFIG_MODEL();
							  				model.INTERNAL_NUM = entity.INTERNAL_NUM;
				model.CHART_TYPE = entity.CHART_TYPE;
				model.TITLE = entity.TITLE;
				model.STORED_PROC = entity.STORED_PROC;
				model.DATA_FIELD1 = entity.DATA_FIELD1;
				model.DATA_FIELD2 = entity.DATA_FIELD2;
				model.DATA_FIELD3 = entity.DATA_FIELD3;
				model.DATA_FIELD4 = entity.DATA_FIELD4;
				model.DATA_FIELD5 = entity.DATA_FIELD5;
				model.DATA_FIELD6 = entity.DATA_FIELD6;
				model.DATA_FIELD7 = entity.DATA_FIELD7;
				model.DATA_FIELD8 = entity.DATA_FIELD8;
				model.X_FIELD = entity.X_FIELD;
				model.Y_FIELD = entity.Y_FIELD;
				model.ROW = entity.ROW;
				model.SEQUENCE = entity.SEQUENCE;
				model.WIDTH = entity.WIDTH;
				model.HEIGHT = entity.HEIGHT;
				model.ACTIVE = entity.ACTIVE;
				model.CREATED_USER = entity.CREATED_USER;
				model.CREATED_DATE_TIME = entity.CREATED_DATE_TIME;
				model.LAST_UPDATE_USER = entity.LAST_UPDATE_USER;
				model.LAST_UPDATE_DATE_TIME = entity.LAST_UPDATE_DATE_TIME;
				model.SECOND = entity.SECOND;
 
				return model;
			}
			else
			{
				return null;
			}
		}

	 

	}
}
