//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Apps.Models;
using Apps.Common;
using Microsoft.Practices.Unity;
using System.Transactions;
using Apps.Locale;
using Apps.Models.Spm;
using System.Linq.Expressions;
using System.Reflection;
using System.Data;

namespace Apps.Service.Spm
{
    public partial class Spm_ExpressInfoService : Virtual_Spm_ExpressInfoService, Apps.IService.Spm.ISpm_ExpressInfoService
    {

        public List<ExViewModel> GetViewList(ref GridPager pager, string queryStr, Expression<Func<Spm_ExpressInfo, bool>> where = null)
        {
            IQueryable<Spm_ExpressInfo> queryData;
            //DateTime queryTime = DateTime.Now.AddDays(-30);
            //s=>s.DateTimeStamp > queryTime
            if (!string.IsNullOrWhiteSpace(queryStr))
            {
                queryData = m_Rep.GetList(where,
                                a => a.TrackingNumber.Contains(queryStr)
                                 || a.ShipmentId.Contains(queryStr)
                                 || a.Company.Contains(queryStr)
                                 || a.State.Contains(queryStr)
                                 || a.ShipperCode.Contains(queryStr)
                                );
            }
            else
            {
                //queryData = m_Rep.GetList(s => s.DateTimeStamp > queryTime);
                queryData = m_Rep.GetList(where);

            }

            ////启用通用列头过滤
            if (!string.IsNullOrWhiteSpace(pager.filterRules))
            {
                List<DataFilterModel> dataFilterList = JsonHandler.Deserialize<List<DataFilterModel>>(pager.filterRules).Where(f => !string.IsNullOrWhiteSpace(f.value)).ToList();
                queryData = LinqHelper.DataFilter<Spm_ExpressInfo>(queryData, dataFilterList);
            }

            pager.totalRows = queryData.Count();
            //排序
            queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
            return CreateViewModelList(queryData);
        }

        public List<ExViewModel> CreateViewModelList(IQueryable<Spm_ExpressInfo> queryData)
        {
            List<Apps.Models.Spm.ExViewModel> modelList = new List<ExViewModel>();
            foreach (var r in queryData) {
                modelList.Add(new ExViewModel() {
                    Id = r.Id,
                    ShipmentId = r.ShipmentId,
                    TrackingNumber = r.TrackingNumber,
                    Company = r.Company,
                    State = r.State,
                    ShipperCode = r.ShipperCode,
                    DateTimeStamp = r.DateTimeStamp,
                    PushTime = r.PushTime,
                    NewTraces = GetTracesByExId(r),
                });
            }

            return modelList;
        }

        private string GetTracesByExId(Spm_ExpressInfo exInfo) {

            string result = "";
            Spm_TracesInfo ti = exInfo.Spm_TracesInfo.FirstOrDefault();
            if (ti != null) {
                result = ti.AcceptTime.ToString() + " : " + ti.AcceptStation;
            }

            return result;
        }

        public System.Data.DataTable GetViewDataTable(Expression<Func<Spm_ExpressInfo, bool>> where = null) {

            IQueryable<Spm_ExpressInfo> queryData = m_Rep.GetList(where);

            System.Data.DataTable dt = new System.Data.DataTable();
            dt.Columns.Add("订单号", typeof(string));
            dt.Columns.Add("运单号", typeof(string));
            dt.Columns.Add("订单创建时间", typeof(string));
            dt.Columns.Add("商家代码", typeof(string));
            dt.Columns.Add("物流状态", typeof(string));
            dt.Columns.Add("承运商", typeof(string));
            dt.Columns.Add("快递最新动态", typeof(string));
            IQueryable<Spm_ExpressInfo> database = queryData;
            foreach(var info in database)
            {
                DataRow row = dt.NewRow();
                row["订单号"] = info.ShipmentId;
                row["运单号"] = info.TrackingNumber;
                row["订单创建时间"] = info.DateTimeStamp;
                row["商家代码"] = info.Company;
                switch (info.State)
                {
                    case "-1": row["物流状态"] = "订阅失败"; break;
                    case "900": row["物流状态"] = "暂无状态"; break;
                    case "0": row["物流状态"] = "无轨迹"; break;
                    case "1": row["物流状态"] = "已揽收"; break;
                    case "2": row["物流状态"] = "在途中"; break;
                    case "3": row["物流状态"] = "签收"; break;
                    case "4": row["物流状态"] = "问题件"; break;
                    default:row["物流状态"] = ""; break;
                }
                row["承运商"] = info.ShipperCode;
                row["快递最新动态"] = GetTracesByExId(info);
                dt.Rows.Add(row);
            };
            return dt;
        }
    }
}
