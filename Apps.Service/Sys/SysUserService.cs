//------------------------------------------------------------------------------
// <auto-generated>
//     此代码已从模板生成。
//
//     手动更改此文件可能导致应用程序出现意外的行为。
//     如果重新生成代码，将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Apps.Models;
using Apps.Common;
using Microsoft.Practices.Unity;
using System.Transactions;
using Apps.Locale;
using System.Linq;
using Apps.Models.Sys;
using Apps.Service.SCV;
using System.Linq.Expressions;
using System.Text;

namespace Apps.Service.Sys
{
    public partial class SysUserService : Virtual_SysUserService, Apps.IService.Sys.ISysUserService
    {

        #region 1.0 根据用户id查询用户权限集合 +List<MODEL.Permission> GetUserPermission(params object[] keyValues)
        /// <summary>
        /// 1.0 根据用户id查询用户权限集合
        /// </summary>
        /// <param name="uid">用户id</param>
        /// <returns></returns>
        public List<Apps.Models.PermissionModel> GetUserPermission(string uid)
        {
            IQueryable<SysModule> modules = m_Rep.GetUserPermission(uid);
            return CreateModelList(modules);
        }
        #endregion


        public List<Apps.Models.Sys.SysUserModel> GetUsrList(ref GridPager pager, string queryStr, Expression<Func<Apps.Models.SysUser, bool>> where = null)
        {

            IQueryable<SysUser> queryData;

            if (!string.IsNullOrWhiteSpace(queryStr))
            {
                queryData = m_Rep.GetList(where
                                , a => a.Id.Contains(queryStr)
                                 || a.UserName.Contains(queryStr)
                                 || a.Password.Contains(queryStr)

                                 || a.TrueName.Contains(queryStr)
                                 || a.Card.Contains(queryStr)
                                 || a.MobileNumber.Contains(queryStr)
                                 || a.PhoneNumber.Contains(queryStr)
                                 || a.QQ.Contains(queryStr)
                                 || a.EmailAddress.Contains(queryStr)
                                 || a.OtherContact.Contains(queryStr)
                                 || a.Province.Contains(queryStr)
                                 || a.City.Contains(queryStr)
                                 || a.Village.Contains(queryStr)
                                 || a.Address.Contains(queryStr)


                                 || a.CreatePerson.Contains(queryStr)
                                 || a.Sex.Contains(queryStr)


                                 || a.Marital.Contains(queryStr)
                                 || a.Political.Contains(queryStr)
                                 || a.Nationality.Contains(queryStr)
                                 || a.Native.Contains(queryStr)
                                 || a.School.Contains(queryStr)
                                 || a.Professional.Contains(queryStr)
                                 || a.Degree.Contains(queryStr)
                                 || a.DepId.Contains(queryStr)
                                 || a.PosId.Contains(queryStr)
                                 || a.Expertise.Contains(queryStr)
                                 || a.Photo.Contains(queryStr)
                                 || a.Attach.Contains(queryStr)
                                 || a.Lead.Contains(queryStr)
                                 || a.LeadName.Contains(queryStr)
                                );
            }
            else
            {
                queryData = m_Rep.GetList(where);
            }


            pager.totalRows = queryData.Count();
            //排序
            queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
            List<Apps.Models.Sys.SysUserModel> modelList = new List<SysUserModel>();

            foreach (var r in queryData)
            {
                modelList.Add(new SysUserModel()
                {
                    Id = r.Id,
                    UserName = r.UserName,
                    Password = r.Password,
                    PasswordExpirationTime = r.PasswordExpirationTime,
                    TrueName = r.TrueName,
                    Card = r.Card,
                    MobileNumber = r.MobileNumber,
                    PhoneNumber = r.PhoneNumber,
                    QQ = r.QQ,
                    EmailAddress = r.EmailAddress,
                    OtherContact = r.OtherContact,
                    Province = r.Province,
                    City = r.City,
                    Village = r.Village,
                    Address = r.Address,
                    State = r.State,
                    CreateTime = r.CreateTime,
                    CreatePerson = r.CreatePerson,
                    Sex = r.Sex,
                    Birthday = r.Birthday,
                    JoinDate = r.JoinDate,
                    Marital = r.Marital,
                    Political = r.Political,
                    Nationality = r.Nationality,
                    Native = r.Native,
                    School = r.School,
                    Professional = r.Professional,
                    Degree = r.Degree,
                    DepId = r.DepId,
                    PosId = r.PosId,
                    Expertise = r.Expertise,
                    Photo = r.Photo,
                    Attach = r.Attach,
                    Lead = r.Lead,
                    LeadName = r.LeadName,
                    DepName = r.SysStruct.Name,
                    PosName = r.SysPosition.Name,
                    RoleName = GetRoleNameByUserId(r),
                    SelectedMerchantCodesStr = GetSelectedMerchantCodeStr(r),
                });
            }

            return modelList;
        }
        private List<PermissionModel> CreateModelList(IQueryable<SysModule> queryData)
        {
            List<PermissionModel> modelList = (from r in queryData
                                               select new PermissionModel
                                               {
                                                   Id = r.Id,
                                                   ParentId = r.ParentId,
                                                   Name = r.Name,
                                                   EnglishName = r.EnglishName,
                                                   Iconic = r.Iconic,
                                                   AreasName = r.AreasName,
                                                   ControllerName = r.ControllerName,
                                                   ActionName = r.ActionName,
                                                   FormMethod = r.FormMethod,
                                                   OperationType = r.OperationType,
                                                   Sort = r.Sort,
                                                   IsLast = r.IsLast
                                               }).ToList();
            return modelList;
        }

        public List<SysUserModel> GetUserByDepId(ref GridPager pager, string depId, string queryStr)
        {
            IQueryable<P_Sys_GetUserByDepId_Result> queryData = null;
            if (!string.IsNullOrWhiteSpace(queryStr))
            {
                queryData = m_Rep.GetUserByDepId(depId).Where(a => a.TrueName.Contains(queryStr));
                pager.totalRows = queryData.Count();
                queryData = m_Rep.GetUserByDepId(depId).Where(a => a.TrueName.Contains(queryStr));
            }
            else
            {
                queryData = m_Rep.GetUserByDepId(depId);
                pager.totalRows = queryData.Count();
                queryData = m_Rep.GetUserByDepId(depId);
            }

            queryData = LinqHelper.SortingAndPaging(queryData, pager.sort, pager.order, pager.page, pager.rows);
            return CreateModelList(ref queryData);

        }

        private List<SysUserModel> CreateModelList(ref IQueryable<P_Sys_GetUserByDepId_Result> queryData)
        {
            List<SysUserModel> modelList = (from r in queryData
                                            select new SysUserModel
                                            {
                                                Id = r.Id,
                                                UserName = r.UserName,
                                                Password = r.Password,
                                                TrueName = r.TrueName,
                                                Card = r.Card,
                                                MobileNumber = r.MobileNumber,
                                                PhoneNumber = r.PhoneNumber,
                                                QQ = r.QQ,
                                                EmailAddress = r.EmailAddress,
                                                OtherContact = r.OtherContact,
                                                Province = r.Province,
                                                City = r.City,
                                                Village = r.Village,
                                                Address = r.Address,
                                                State = (bool)r.State,
                                                CreateTime = r.CreateTime,
                                                CreatePerson = r.CreatePerson,
                                                Sex = r.Sex,
                                                Birthday = r.Birthday,
                                                JoinDate = r.JoinDate,
                                                Marital = r.Marital,
                                                Political = r.Political,
                                                Nationality = r.Nationality,
                                                Native = r.Native,
                                                School = r.School,
                                                Professional = r.Professional,
                                                Degree = r.Degree,
                                                DepId = r.DepId,
                                                PosId = r.PosId,
                                                Expertise = r.Expertise,
                                                Photo = r.Photo,
                                                Attach = r.Attach,
                                                Lead = r.Lead,
                                                LeadName = r.LeadName,
                                            }).ToList();
            foreach (var v in modelList)
            {
                v.DepName = DBSession.SysStruct.GetById(v.DepId).Name;
                v.PosName = DBSession.SysPosition.GetById(v.PosId).Name;
            }
            return modelList;
        }

        public int GetUserCountByDepId(string depId)
        {
            return m_Rep.GetUserCountByDepId(depId);
        }

        public override List<SysUserModel> CreateModelList(ref IQueryable<SysUser> queryData)
        {
            List<Apps.Models.Sys.SysUserModel> modelList = new List<SysUserModel>();

            foreach (var r in queryData)
            {
                modelList.Add(new SysUserModel()
                {
                    Id = r.Id,
                    UserName = r.UserName,
                    Password = r.Password,
                    PasswordExpirationTime = r.PasswordExpirationTime,
                    TrueName = r.TrueName,
                    Card = r.Card,
                    MobileNumber = r.MobileNumber,
                    PhoneNumber = r.PhoneNumber,
                    QQ = r.QQ,
                    EmailAddress = r.EmailAddress,
                    OtherContact = r.OtherContact,
                    Province = r.Province,
                    City = r.City,
                    Village = r.Village,
                    Address = r.Address,
                    State = r.State,
                    CreateTime = r.CreateTime,
                    CreatePerson = r.CreatePerson,
                    Sex = r.Sex,
                    Birthday = r.Birthday,
                    JoinDate = r.JoinDate,
                    Marital = r.Marital,
                    Political = r.Political,
                    Nationality = r.Nationality,
                    Native = r.Native,
                    School = r.School,
                    Professional = r.Professional,
                    Degree = r.Degree,
                    DepId = r.DepId,
                    PosId = r.PosId,
                    Expertise = r.Expertise,
                    Photo = r.Photo,
                    Attach = r.Attach,
                    Lead = r.Lead,
                    LeadName = r.LeadName,
                    DepName = r.SysStruct.Name,
                    PosName = r.SysPosition.Name,
                    RoleName = GetRoleNameByUserId(r),
                    MerchantCodes = GetMerchantCodes(),
                });
            }

            return modelList;
        }

        private string GetRoleNameByUserId(SysUser user)
        {
            string result = "";
            foreach (var item in user.SysRole)
            {
                result += "[" + item.Name + "] ";
            }
            return result;
        }
        //获得所有商家代码
        public IEnumerable<MerchantCodeItem> GetMerchantCodes()
        {
            Apps.IRepository.SCV.ISCVDBSession scvDBSession = SCVDBSessionFactory.GetDBSession();

            return scvDBSession.COMPANY.GetList().Select(c => new MerchantCodeItem
            {
                Text = c.COMPANY1,
                Value = c.COMPANY1,
            });
        }


        public override void Create(ref ValidationErrors errors, SysUserModel model)
        {
            SysUser entity = m_Rep.GetById(model.Id);
            if (entity != null)
            {
                errors.Add(Resource.PrimaryRepeat);
                return;
            }

            if (m_Rep.GetList(u => u.UserName == model.UserName).Count() > 0)
            {
                errors.Add("用户名重复");
                return;
            }

            entity = new SysUser();
            entity.Id = model.Id;
            entity.UserName = model.UserName;
            entity.Password = model.Password;
            entity.PasswordExpirationTime = model.PasswordExpirationTime;
            entity.TrueName = model.TrueName;
            entity.Card = model.Card;
            entity.MobileNumber = model.MobileNumber;
            entity.PhoneNumber = model.PhoneNumber;
            entity.QQ = model.QQ;
            entity.EmailAddress = model.EmailAddress;
            entity.OtherContact = model.OtherContact;
            entity.Province = model.Province;
            entity.City = model.City;
            entity.Village = model.Village;
            entity.Address = model.Address;
            entity.State = model.State;
            entity.CreateTime = model.CreateTime;
            entity.CreatePerson = model.CreatePerson;
            entity.Sex = model.Sex;
            entity.Birthday = model.Birthday;
            entity.JoinDate = model.JoinDate;
            entity.Marital = model.Marital;
            entity.Political = model.Political;
            entity.Nationality = model.Nationality;
            entity.Native = model.Native;
            entity.School = model.School;
            entity.Professional = model.Professional;
            entity.Degree = model.Degree;
            entity.DepId = model.DepId;
            entity.PosId = model.PosId;
            entity.Expertise = model.Expertise;
            if (model.Photo.IsNullOrEmpty())
            {
                entity.Photo = "/upload/201704/30/201704300035101885.jpg";
            }
            else
            {
                entity.Photo = model.Photo;
            }
            entity.Attach = model.Attach;
            entity.Lead = model.Lead;
            entity.LeadName = model.LeadName;


            foreach (var item in model.PostedMerchantCodes)
            {
                entity.SysUserMerchantCode.Add(new SysUserMerchantCode() { Id = ResultHelper.NewId, UserId = model.Id, MerchantCode = item });
            }

            m_Rep.Create(entity);
        }

        public override SysUserModel GetById(string id)
        {
            SysUser r = m_Rep.GetById(id);
            if (r != null)
            {
                //SysUser entity = m_Rep.GetById(id);
                Apps.Models.Sys.SysUserModel model = new Apps.Models.Sys.SysUserModel()
                {
                    Id = r.Id,
                    UserName = r.UserName,
                    Password = r.Password,
                    PasswordExpirationTime = r.PasswordExpirationTime,
                    TrueName = r.TrueName,
                    Card = r.Card,
                    MobileNumber = r.MobileNumber,
                    PhoneNumber = r.PhoneNumber,
                    QQ = r.QQ,
                    EmailAddress = r.EmailAddress,
                    OtherContact = r.OtherContact,
                    Province = r.Province,
                    City = r.City,
                    Village = r.Village,
                    Address = r.Address,
                    State = r.State,
                    CreateTime = r.CreateTime,
                    CreatePerson = r.CreatePerson,
                    Sex = r.Sex,
                    Birthday = r.Birthday,
                    JoinDate = r.JoinDate,
                    Marital = r.Marital,
                    Political = r.Political,
                    Nationality = r.Nationality,
                    Native = r.Native,
                    School = r.School,
                    Professional = r.Professional,
                    Degree = r.Degree,
                    DepId = r.DepId,
                    PosId = r.PosId,
                    Expertise = r.Expertise,
                    Photo = r.Photo,
                    Attach = r.Attach,
                    Lead = r.Lead,
                    LeadName = r.LeadName,
                    DepName = r.SysStruct.Name,
                    PosName = r.SysPosition.Name,
                    RoleName = GetRoleNameByUserId(r),
                    MerchantCodes = GetMerchantCodes(),
                    SelectedMerchantCodes = GetSelectedMerchantCodes(r),
                };
                return model;
            }
            else
            {
                return null;
            }
        }

        //获得当前用户拥有商家代码
        private IEnumerable<MerchantCodeItem> GetSelectedMerchantCodes(SysUser user)
        {

            return user.SysUserMerchantCode.Select(c => new MerchantCodeItem
            {
                Text = c.MerchantCode,
                Value = c.MerchantCode,
            }).ToList();
        }

        private string GetSelectedMerchantCodeStr(SysUser user)
        {
            StringBuilder sBuilder = new StringBuilder() ;
            foreach (var item in user.SysUserMerchantCode) {
                sBuilder.Append(item.MerchantCode).Append(",");
            }
            return sBuilder.ToString();
        }

        public void Edit(ref ValidationErrors errors, SysUserModel model)
        {
            SysUser entity = m_Rep.GetById(model.Id);
            if (entity == null)
            {
                errors.Add(Resource.Disable);
                return;
            }

            entity.UserName = model.UserName;
            entity.TrueName = model.TrueName;
            entity.Card = model.Card;
            entity.MobileNumber = model.MobileNumber;
            entity.PhoneNumber = model.PhoneNumber;
            entity.QQ = model.QQ;
            entity.EmailAddress = model.EmailAddress;
            entity.OtherContact = model.OtherContact;
            entity.Province = model.Province;
            entity.City = model.City;
            entity.Village = model.Village;
            entity.Address = model.Address;
            entity.State = model.State;
            //entity.CreateTime = model.CreateTime;
            //entity.CreatePerson = model.CreatePerson;
            entity.Sex = model.Sex;
            entity.Birthday = model.Birthday;
            entity.JoinDate = model.JoinDate;
            entity.Marital = model.Marital;
            entity.Political = model.Political;
            entity.Nationality = model.Nationality;
            entity.Native = model.Native;
            entity.School = model.School;
            entity.Professional = model.Professional;
            entity.Degree = model.Degree;
            entity.DepId = model.DepId;
            entity.PosId = model.PosId;
            entity.Expertise = model.Expertise;
            entity.Photo = model.Photo;
            entity.Attach = model.Attach;
            entity.Lead = model.Lead;
            entity.LeadName = model.LeadName;



            m_Rep.Modify(entity);



            DBSession.SysUserMerchantCode.RemoveByEntities(entity.SysUserMerchantCode);

            foreach (var item in model.PostedMerchantCodes)
            {
                entity.SysUserMerchantCode.Add(new SysUserMerchantCode() { Id = ResultHelper.NewId, UserId = entity.Id, MerchantCode = item });
            }

        }
        /// <summary>
        /// 删除职位--级联更新商家编码关联信息
        /// </summary>
        /// <param name="errors"></param>
        /// <param name="model"></param>
        public void EditByPosition(ref ValidationErrors errors, SysUserModel model)
        {
            SysUser entity = m_Rep.GetById(model.Id);
            if (entity == null)
            {
                errors.Add(Resource.Disable);
                return;
            }
            entity.DepId = model.DepId;
            entity.PosId = model.PosId;
            m_Rep.Modify(entity);

            DBSession.SysUserMerchantCode.RemoveByEntities(entity.SysUserMerchantCode);
        }
        public void UpdateByStruct(ref ValidationErrors errors, SysUserModel model)
        {
            SysUser entity = m_Rep.GetById(model.Id);
            if (entity == null)
            {
                errors.Add(Resource.Disable);
                return;
            }
            entity.DepId = model.DepId;
            m_Rep.Modify(entity);
        }    

        public void EditPwd(ref ValidationErrors errors, string id, string pwd)
        {

            SysUser entity = m_Rep.GetById(id);
            if (entity == null)
            {
                errors.Add(Resource.Disable);
            }
            entity.Password = ValueConvert.MD5(pwd);
        }

        public override void RemoveById(ref ValidationErrors errors, string id)
        {

            SysUser entity = m_Rep.GetById(id);
            if (entity == null)
            {
                errors.Add(Resource.Disable);
                return;
            }


            DBSession.SysUserConfig.RemoveByEntities(entity.SysUserConfig);
            DBSession.SysUserMerchantCode.RemoveByEntities(entity.SysUserMerchantCode);

            m_Rep.Remove(entity);

        }

        public IQueryable<P_Sys_GetRoleByUserId_Result> GetRoleByUserId(ref GridPager pager, string userId)
        {
            IQueryable<P_Sys_GetRoleByUserId_Result> queryData = m_Rep.GetRoleByUserId(userId);
            pager.totalRows = queryData.Count();
            queryData = m_Rep.GetRoleByUserId(userId);
            return queryData.Skip((pager.page - 1) * pager.rows).Take(pager.rows);
        }

        public void UpdateSysRoleSysUser(string userId, string[] roleIds)
        {
            SysUser user = m_Rep.GetById(userId);

            int len = user.SysRole.Count;

            for (int i = 0; i < len; i++) {
                user.SysRole.Remove(user.SysRole.First());
            }

            foreach (var rId in roleIds) {
                user.SysRole.Add(DBSession.SysRole.GetById(rId));
            }
        }

        public AccountModel GetAccountByUserName(string UserName) {
           var usr =  m_Rep.GetList(u=>u.UserName == UserName).SingleOrDefault();

            if (usr == null) return null;

            AccountModel account = new AccountModel();
            account.Id = usr.Id;
            account.UserName = usr.UserName;
            account.TrueName = usr.TrueName;
            account.Photo = string.IsNullOrEmpty(usr.Photo) ? "/Content/Images/Photo.jpg" : usr.Photo;
            account.State = usr.State;
            account.Password = usr.Password;
            int len = usr.SysUserMerchantCode.Count;
            account.HasMerchantCode = new string[len];
            int i = 0;
            foreach (var item in usr.SysUserMerchantCode)
            {
                account.HasMerchantCode[i] = item.MerchantCode;
                i++;
            }

            account.AllMerchant = SCVDBSessionFactory.GetDBSession().COMPANY.GetList().Count() == len ? true : false;

            return account;
        }

        public AccountModel GetAccountByUserId(string userId)
        {
            var usr = m_Rep.GetList(u => u.Id == userId).SingleOrDefault();

            if (usr == null) return null;

            AccountModel account = new AccountModel();
            account.Id = usr.Id;
            account.UserName = usr.UserName;
            account.TrueName = usr.TrueName;
            account.Photo = string.IsNullOrEmpty(usr.Photo) ? "/Content/Images/Photo.jpg" : usr.Photo;
            account.State = usr.State;
            account.Password = usr.Password;
            int len = usr.SysUserMerchantCode.Count;
            account.HasMerchantCode = new string[len];
            int i = 0;
            foreach (var item in usr.SysUserMerchantCode)
            {
                account.HasMerchantCode[i] = item.MerchantCode;
                i++;
            }

            account.AllMerchant = SCVDBSessionFactory.GetDBSession().COMPANY.GetList().Count() == len ? true : false;

            return account;
        }
    }
}
